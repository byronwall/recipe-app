[{"/Users/byronwall/Projects/recipe-app/client/src/index.tsx":"1","/Users/byronwall/Projects/recipe-app/client/src/serviceWorker.ts":"2","/Users/byronwall/Projects/recipe-app/client/src/App.tsx":"3","/Users/byronwall/Projects/recipe-app/client/src/DataLayer.tsx":"4","/Users/byronwall/Projects/recipe-app/client/src/models.ts":"5","/Users/byronwall/Projects/recipe-app/client/src/Ingredients.tsx":"6","/Users/byronwall/Projects/recipe-app/client/src/Navigation.tsx":"7","/Users/byronwall/Projects/recipe-app/client/src/HomePage.tsx":"8","/Users/byronwall/Projects/recipe-app/client/src/MealPlan/MealPlan.tsx":"9","/Users/byronwall/Projects/recipe-app/client/src/Recipes/RecipeList.tsx":"10","/Users/byronwall/Projects/recipe-app/client/src/ShoppingList/ShoppingList.tsx":"11","/Users/byronwall/Projects/recipe-app/client/src/Recipes/RecipeViewer.tsx":"12","/Users/byronwall/Projects/recipe-app/client/src/helpers.ts":"13","/Users/byronwall/Projects/recipe-app/client/src/Ingredients/IngredientViewEdit.tsx":"14","/Users/byronwall/Projects/recipe-app/client/src/Ingredients/SuggestedIngredients.tsx":"15","/Users/byronwall/Projects/recipe-app/client/src/MealPlan/RecipeChooser.tsx":"16","/Users/byronwall/Projects/recipe-app/client/src/MealPlan/MealPlanDay.tsx":"17","/Users/byronwall/Projects/recipe-app/client/src/Recipes/NewRecipe.tsx":"18","/Users/byronwall/Projects/recipe-app/client/src/OverlayCenter.tsx":"19","/Users/byronwall/Projects/recipe-app/client/src/ShoppingList/KrogerSearch.tsx":"20","/Users/byronwall/Projects/recipe-app/client/src/Recipes/EditRecipe.tsx":"21","/Users/byronwall/Projects/recipe-app/client/src/ShoppingList/ShoppingListGroup.tsx":"22","/Users/byronwall/Projects/recipe-app/client/src/ShoppingList/AisleChooser.tsx":"23","/Users/byronwall/Projects/recipe-app/client/src/Recipes/ingredient_processing.ts":"24","/Users/byronwall/Projects/recipe-app/client/src/Ingredients/SuggestedIngredientRow.tsx":"25","/Users/byronwall/Projects/recipe-app/client/src/Recipes/StepGroupEditor.tsx":"26","/Users/byronwall/Projects/recipe-app/client/src/Recipes/IngredientGroupEditor.tsx":"27","/Users/byronwall/Projects/recipe-app/client/src/ShoppingList/KrogerItemDisplay.tsx":"28","/Users/byronwall/Projects/recipe-app/client/src/Ingredients/IngredientChooserOverlay.tsx":"29","/Users/byronwall/Projects/recipe-app/client/src/Recipes/StepsEditor.tsx":"30","/Users/byronwall/Projects/recipe-app/client/src/Recipes/IngredientsEditor.tsx":"31","/Users/byronwall/Projects/recipe-app/client/src/Recipes/IngredientChooser.tsx":"32","/Users/byronwall/Projects/recipe-app/client/src/ShoppingList/ShoppingListGroupItem.tsx":"33","/Users/byronwall/Projects/recipe-app/client/src/MealPlan/ActionsComp.tsx":"34","/Users/byronwall/Projects/recipe-app/client/src/BrowseRecipes.tsx":"35","/Users/byronwall/Projects/recipe-app/client/src/BrowseRecipeViewer.tsx":"36"},{"size":1172,"mtime":1625918774673,"results":"37","hashOfConfig":"38"},{"size":6168,"mtime":1625918738043,"results":"39","hashOfConfig":"38"},{"size":3539,"mtime":1611891062365,"results":"40","hashOfConfig":"38"},{"size":9777,"mtime":1625918774335,"results":"41","hashOfConfig":"38"},{"size":4671,"mtime":1611975966141,"results":"42","hashOfConfig":"38"},{"size":4678,"mtime":1597543269638,"results":"43","hashOfConfig":"38"},{"size":1892,"mtime":1611891043227,"results":"44","hashOfConfig":"38"},{"size":474,"mtime":1596858856104,"results":"45","hashOfConfig":"38"},{"size":6063,"mtime":1625918901617,"results":"46","hashOfConfig":"38"},{"size":5051,"mtime":1611631282386,"results":"47","hashOfConfig":"38"},{"size":11114,"mtime":1625918983062,"results":"48","hashOfConfig":"38"},{"size":11982,"mtime":1625918930044,"results":"49","hashOfConfig":"38"},{"size":918,"mtime":1611970873033,"results":"50","hashOfConfig":"38"},{"size":4710,"mtime":1625918871468,"results":"51","hashOfConfig":"38"},{"size":6009,"mtime":1625918774697,"results":"52","hashOfConfig":"38"},{"size":2644,"mtime":1597463563850,"results":"53","hashOfConfig":"38"},{"size":4736,"mtime":1597464224047,"results":"54","hashOfConfig":"38"},{"size":4684,"mtime":1597523405440,"results":"55","hashOfConfig":"38"},{"size":1809,"mtime":1598148308305,"results":"56","hashOfConfig":"38"},{"size":3346,"mtime":1625918968806,"results":"57","hashOfConfig":"38"},{"size":3324,"mtime":1597546163189,"results":"58","hashOfConfig":"38"},{"size":2070,"mtime":1611631420129,"results":"59","hashOfConfig":"38"},{"size":1677,"mtime":1598151279715,"results":"60","hashOfConfig":"38"},{"size":5555,"mtime":1625918848706,"results":"61","hashOfConfig":"38"},{"size":6404,"mtime":1625918886638,"results":"62","hashOfConfig":"38"},{"size":7055,"mtime":1625918945923,"results":"63","hashOfConfig":"38"},{"size":7791,"mtime":1625918914627,"results":"64","hashOfConfig":"38"},{"size":3833,"mtime":1625918958460,"results":"65","hashOfConfig":"38"},{"size":1677,"mtime":1596508394372,"results":"66","hashOfConfig":"38"},{"size":4614,"mtime":1597547080278,"results":"67","hashOfConfig":"38"},{"size":7131,"mtime":1597546617687,"results":"68","hashOfConfig":"38"},{"size":4623,"mtime":1625918813332,"results":"69","hashOfConfig":"38"},{"size":5544,"mtime":1611632452645,"results":"70","hashOfConfig":"38"},{"size":752,"mtime":1611631159989,"results":"71","hashOfConfig":"38"},{"size":5022,"mtime":1612928658126,"results":"72","hashOfConfig":"38"},{"size":4609,"mtime":1611976213172,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"1l75fpi",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"76"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"76"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"76"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"76"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"76"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"76"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"76"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"76"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"76"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"76"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"76"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"76"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"76"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"76"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"76"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"76"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"76"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"76"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"76"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"76"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"76"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"76"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"76"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"76"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"76"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"76"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"76"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"76"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"76"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"76"},"/Users/byronwall/Projects/recipe-app/client/src/index.tsx",[],[],"/Users/byronwall/Projects/recipe-app/client/src/serviceWorker.ts",[],"/Users/byronwall/Projects/recipe-app/client/src/App.tsx",["179","180"],"import { Card } from \"@blueprintjs/core\";\nimport React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { Subscribe } from \"unstated\";\nimport { GLOBAL_DATA_LAYER } from \".\";\nimport { BrowseRecipes } from \"./BrowseRecipes\";\nimport { DataLayer } from \"./DataLayer\";\nimport { HomePage } from \"./HomePage\";\nimport { Ingredients } from \"./Ingredients\";\nimport { MealPlan } from \"./MealPlan/MealPlan\";\nimport { Navigation } from \"./Navigation\";\nimport { RecipeList } from \"./Recipes/RecipeList\";\nimport { RecipeViewer } from \"./Recipes/RecipeViewer\";\nimport { ShoppingList } from \"./ShoppingList/ShoppingList\";\n\nexport class App extends React.Component {\n    render() {\n        return (\n            <Subscribe to={[DataLayer]}>\n                {(data: DataLayer) => (\n                    <div\n                        style={{\n                            maxWidth: 960,\n                            margin: \"auto\",\n                            marginTop: 10,\n                            paddingLeft: 10,\n                            paddingRight: 10,\n                        }}\n                    >\n                        <Navigation />\n\n                        <Card style={{ marginTop: 10 }}>\n                            <Switch>\n                                <Route path=\"/recipes\">\n                                    <RecipeList recipes={data.state.recipes} />\n                                </Route>\n\n                                <Route\n                                    path=\"/recipe/:id\"\n                                    render={(props) => {\n                                        const id = +props.match.params[\"id\"];\n                                        const recipe = data.state.recipes.find(\n                                            (c) => c.id === id\n                                        );\n                                        return <RecipeViewer recipe={recipe} />;\n                                    }}\n                                ></Route>\n\n                                <Route path=\"/ingredients\">\n                                    <Ingredients\n                                        ingredients={data.state.ingredients}\n                                        recipes={data.state.recipes}\n                                        onSaveNewIngredient={(newIngredient) =>\n                                            GLOBAL_DATA_LAYER.addIngredient(\n                                                newIngredient\n                                            )\n                                        }\n                                    />\n                                </Route>\n\n                                <Route path=\"/plan\">\n                                    <MealPlan meals={data.state.plannedMeals} />\n                                </Route>\n\n                                <Route path=\"/list\">\n                                    <ShoppingList\n                                        shoppingList={data.state.shoppingList}\n                                    />\n                                </Route>\n                                <Route path=\"/browse\">\n                                    <BrowseRecipes />\n                                </Route>\n\n                                <Route path=\"/\" exact>\n                                    <HomePage />\n                                </Route>\n                            </Switch>\n                        </Card>\n                    </div>\n                )}\n            </Subscribe>\n        );\n    }\n}\n","/Users/byronwall/Projects/recipe-app/client/src/DataLayer.tsx",["181","182","183","184","185","186","187","188","189","190","191","192","193","194"],"import axios, { AxiosResponse } from \"axios\";\nimport Fuse from \"fuse.js\";\nimport FuzzySet from \"fuzzyset\";\nimport _ from \"lodash\";\nimport { Container } from \"unstated\";\nimport { toastHolder } from \".\";\nimport {\n    API_IngredParam,\n    API_MealPlanUpdate,\n    API_RecipeIngredParam,\n    API_RecipeParam,\n    API_ShoppingAdd,\n    API_ShoppingDelete,\n    API_ShoppingRemoveRecipe,\n    API_ShoppingUpdate,\n    getNewId,\n    Ingredient,\n    PlannedMeal,\n    Recipe,\n    SavedDb,\n    ShoppingListItem,\n} from \"./models\";\n\ninterface DataLayerState {\n    ingredients: Ingredient[];\n    recipes: Recipe[];\n    plannedMeals: PlannedMeal[];\n\n    shoppingList: ShoppingListItem[];\n\n    newIngredients: Ingredient[];\n\n    fuzzyIngredientNames: FuzzySet;\n    fuzzyIngredientMods: FuzzySet;\n    fuzzyIngredientUnits: FuzzySet;\n\n    hasKrogerAuth: boolean;\n}\n\nexport class DataLayer extends Container<DataLayerState> {\n    constructor() {\n        super();\n\n        this.state = {\n            ingredients: [],\n            recipes: [],\n            newIngredients: [],\n            plannedMeals: [],\n            shoppingList: [],\n            fuzzyIngredientNames: FuzzySet(),\n            fuzzyIngredientMods: FuzzySet(),\n            fuzzyIngredientUnits: FuzzySet(),\n            hasKrogerAuth: false,\n        };\n\n        // after init-- fire off db query\n        this.getDb();\n    }\n\n    async updateRecipeAndIngredient(newRecipe: Recipe, newIngred: Ingredient) {\n        const postData: API_RecipeIngredParam = {\n            recipe: newRecipe,\n            ingredient: newIngred,\n        };\n\n        const res = await axios.post(\"/api/update_recipe_ingredient\", postData);\n\n        this.handleResponse(res);\n    }\n\n    async updateRecipe(newRecipe: Recipe) {\n        const postData: API_RecipeParam = {\n            recipe: newRecipe,\n        };\n\n        const res = await axios.post(\"/api/update_recipe\", postData);\n\n        this.handleResponse(res);\n    }\n\n    async updateIngredient(newIngredient: Ingredient) {\n        const postData: API_IngredParam = {\n            ingredient: newIngredient,\n        };\n\n        const res = await axios.post(\"/api/update_ingredient\", postData);\n\n        this.handleResponse(res);\n    }\n\n    addNewIngredient(newIngredient: Ingredient) {\n        const isExisting =\n            this.state.ingredients.find((c) => c.id === newIngredient.id) ??\n            this.state.newIngredients.find((c) => c.id === newIngredient.id);\n\n        globalLog(\"add new ingred\", newIngredient, isExisting);\n\n        // don't need to add if existing\n        if (isExisting) {\n            return;\n        }\n\n        this.setState((prevState) => {\n            return {\n                newIngredients: prevState.newIngredients.concat(newIngredient),\n            };\n        });\n    }\n\n    getIngredient(id: number): Ingredient | undefined {\n        // search known ingredients... then new ones\n\n        return (\n            this.state.ingredients.find((c) => c.id === id) ??\n            this.state.newIngredients.find((c) => c.id === id)\n        );\n    }\n\n    getRecipe(id: number): Recipe | undefined {\n        // search known ingredients... then new ones\n\n        return this.state.recipes.find((c) => c.id === id);\n    }\n\n    async removeRecipeFromShoppingList(_recipe: Recipe | number) {\n        const recipeId = typeof _recipe === \"number\" ? _recipe : _recipe.id;\n\n        const postData: API_ShoppingRemoveRecipe = { recipeId };\n\n        const res = await axios.post(\"/api/shopping_remove_recipe\", postData);\n\n        this.handleResponse(res);\n    }\n\n    async addRecipesToShoppingList(recipes: (Recipe | number)[]) {\n        // TODO: add a scale parameter\n\n        const newShopItems: ShoppingListItem[] = [];\n\n        recipes.forEach((_rec) => {\n            const rec = typeof _rec === \"number\" ? this.getRecipe(_rec) : _rec;\n            rec?.ingredientGroups.forEach((c) =>\n                c.ingredients.forEach((ing) => {\n                    newShopItems.push({\n                        ingredientAmount: ing,\n                        recipeId: rec.id,\n                        isBought: false,\n                        id: getNewId(),\n                    });\n                })\n            );\n        });\n\n        return this.addItemsToShoppingList(newShopItems);\n    }\n\n    async addItemsToShoppingList(newItems: ShoppingListItem[]) {\n        globalLog(\"add new items\", newItems);\n        const postData: API_ShoppingAdd = {\n            items: newItems,\n        };\n\n        toastHolder.show({\n            message: \"Shopping list updated\",\n            intent: \"success\",\n        });\n\n        const res = await axios.post(\"/api/add_shopping\", postData);\n\n        this.handleResponse(res);\n    }\n\n    async deleteShoppingListItems(ids: number[]) {\n        const postData: API_ShoppingDelete = {\n            ids,\n        };\n\n        const res = await axios.post(\"/api/delete_shopping\", postData);\n\n        this.handleResponse(res);\n    }\n\n    async updateShoppingListItem(newItem: ShoppingListItem[]) {\n        const postData: API_ShoppingUpdate = {\n            item: newItem,\n        };\n\n        const res = await axios.post(\"/api/update_shopping\", postData);\n\n        this.handleResponse(res);\n    }\n\n    reloadFromServer(newDb: SavedDb) {\n        globalLog(\"new datA\", newDb);\n\n        // force all dates to be dates\n\n        newDb.plannedMeals.forEach((meal) => {\n            meal.date = new Date(meal.date);\n        });\n\n        // add the ID which is parsed later\n        // add the comments to help ID longer names\n        const goodNames = newDb.ingredients\n            .filter((c) => c.isGoodName)\n            .map((c) => c.name + \"|||\" + c.id + \"|||\" + c.comments);\n\n        const ingredFuzzy = FuzzySet(goodNames, false, 3, 9);\n\n        let goodUnits: string[] = [];\n        let goodMods: string[] = [];\n        newDb.recipes.forEach((rec) =>\n            rec.ingredientGroups.forEach((grp) =>\n                grp.ingredients.forEach((ing) => {\n                    // prevent really long modifiers from breaking things\n                    if (ing.modifier.length < 10) {\n                        goodMods.push(ing.modifier);\n                    }\n                    goodUnits.push(ing.unit);\n                })\n            )\n        );\n        goodMods = _.uniq(goodMods);\n        goodUnits = _.uniq(goodUnits);\n\n        globalLog(\"modifiers\", goodMods);\n\n        const modFuzzy = FuzzySet(goodMods, false, 3, 9);\n        const unitsFuzzy = FuzzySet(goodUnits, false, 3, 9);\n\n        this.setState({\n            recipes: newDb.recipes,\n            ingredients: _.sortBy(newDb.ingredients, (c) => c.isGoodName),\n            plannedMeals: newDb.plannedMeals,\n            shoppingList: newDb.shoppingList,\n            fuzzyIngredientNames: ingredFuzzy,\n            fuzzyIngredientMods: modFuzzy,\n            fuzzyIngredientUnits: unitsFuzzy,\n            hasKrogerAuth:\n                newDb.userAccessToken !== undefined &&\n                newDb.userAccessToken !== \"\",\n        });\n    }\n\n    async addIngredient(newIngredient: Ingredient) {\n        const res = await axios.post(\"/api/add_ingredient\", newIngredient);\n\n        this.handleResponse(res);\n    }\n\n    async saveNewRecipe(newRecipe: Recipe, newIngredients?: Ingredient[]) {\n        globalLog(\"save new\", this.state.newIngredients);\n        const res = await axios.post(\"/api/add_recipe\", {\n            recipe: newRecipe,\n            newIngredients: newIngredients ?? this.state.newIngredients,\n        });\n\n        // remove any new ingredients client side since they'll be saved on server\n        const usedIngredientIds = _.flatten(\n            newRecipe.ingredientGroups.map((grp) =>\n                grp.ingredients.map((d) => d.ingredientId)\n            )\n        );\n\n        const filterNewIngred = this.state.newIngredients.filter(\n            (i) => usedIngredientIds.find((c) => c === i.id) === undefined\n        );\n\n        this.setState({ newIngredients: filterNewIngred });\n\n        this.handleResponse(res);\n    }\n\n    async getDb() {\n        const res = await axios.get<SavedDb>(\"/api/db\");\n\n        this.handleResponse(res);\n    }\n\n    private handleResponse(res: AxiosResponse<SavedDb>) {\n        const newDb = res.data;\n\n        globalLog(\"new data\", newDb);\n\n        // this will fire off state updates\n        this.reloadFromServer(newDb);\n    }\n\n    fuzzyMatchRecipe(_query: string): Recipe[] {\n        if (_query === \"\") {\n            return this.state.recipes;\n        }\n\n        // 2. Set up the Fuse instance\n        const fuse = new Fuse(this.state.recipes, {\n            keys: [\"name\"],\n        });\n\n        // 3. Now search!\n        return fuse.search(_query).map((c) => c.item);\n    }\n\n    async updateMealPlan(mealsToUpdate: PlannedMeal[]) {\n        const postData: API_MealPlanUpdate = {\n            meals: mealsToUpdate,\n        };\n        const res = await axios.post(\"/api/update_meals\", postData);\n\n        this.handleResponse(res);\n    }\n\n    async addMealPlanItem(date: Date | undefined, recipe: Recipe) {\n        if (date === undefined) {\n            return;\n        }\n\n        const meal: PlannedMeal = {\n            date: date,\n            recipeId: recipe.id,\n            isMade: false,\n            isOnShoppingList: false,\n            scale: 1,\n            id: getNewId(),\n        };\n\n        const res = await axios.post(\"/api/add_meal\", {\n            meal,\n        });\n\n        this.handleResponse(res);\n    }\n\n    async deletePlannedMeal(meal: PlannedMeal) {\n        const res = await axios.post(\"/api/delete_meal\", {\n            meal,\n        });\n\n        this.handleResponse(res);\n    }\n\n    async deleteRecipe(id: number) {\n        const res = await axios.post(\"/api/delete_recipe\", {\n            id,\n        });\n\n        this.handleResponse(res);\n    }\n}\n","/Users/byronwall/Projects/recipe-app/client/src/models.ts",["195"],"export interface Recipe {\n  name: string;\n  description: string;\n  id: number;\n\n  ingredientGroups: IngredientGroup[];\n  stepGroups: RecipeStepGroup[];\n}\n\nexport interface IngredientGroup {\n  title: string;\n  ingredients: IngredientAmount[];\n}\n\nexport interface RecipeStepGroup {\n  title: string;\n  steps: RecipeStep[];\n}\n\nexport function createDefaultRecipe(): Recipe {\n  return {\n    name: \"\",\n    description: \"\",\n    id: getNewId(),\n    ingredientGroups: [{ title: \"group\", ingredients: [] }],\n    stepGroups: [{ title: \"group\", steps: [] }],\n  };\n}\n\nlet idExtra = 0;\nexport function getNewId() {\n  return new Date().getTime() - idExtra++;\n}\n\nexport interface RecipeStep {\n  description: string;\n  duration: string;\n}\n\nexport interface IngredientAmount {\n  ingredientId: number;\n  amount: string | number;\n  unit: string;\n  modifier: string;\n}\n\nexport interface Ingredient {\n  name: string;\n\n  comments: string; // meant to hold extra detail beyond the name\n\n  plu: string;\n  id: number;\n\n  aisle: string;\n\n  isGoodName: boolean;\n}\n\nexport interface SavedDb {\n  recipes: Recipe[];\n  ingredients: Ingredient[];\n  plannedMeals: PlannedMeal[];\n  shoppingList: ShoppingListItem[];\n\n  userAccessToken: string;\n  userRefreshToken: string;\n}\n\nexport interface PlannedMeal {\n  date: Date;\n  recipeId: number;\n  scale: number;\n\n  isMade: boolean;\n  isOnShoppingList: boolean;\n\n  id: number;\n}\n\nexport interface API_RecipeIngredParam {\n  recipe: Recipe;\n  ingredient: Ingredient;\n}\nexport interface API_RecipeParam {\n  recipe: Recipe;\n}\n\nexport interface API_IngredParam {\n  ingredient: Ingredient;\n}\n\nexport interface API_ShoppingRemoveRecipe {\n  recipeId: number;\n}\n\nexport interface API_KrogerSearch {\n  filterTerm: string;\n}\n\nexport interface API_KrogerAddCart {\n  items: KrogerAddCartItem[];\n}\n\nexport interface API_KrogerAddCartResponse {\n  result: boolean;\n}\n\nexport interface KrogerAddCartItem {\n  upc: string;\n  quantity: number;\n}\n\nexport interface ShoppingListItem {\n  id: number;\n  ingredientAmount: IngredientAmount;\n  recipeId: number; // will be -1 if \"loose\"\n  isBought: boolean;\n\n  /** Field used when there is not corresponding ingredient or recipe */\n  textOnly?: string;\n}\n\nexport interface API_ShoppingAdd {\n  items: ShoppingListItem[];\n}\nexport interface API_ShoppingDelete {\n  ids: number[];\n}\n\nexport interface API_ShoppingUpdate {\n  item: ShoppingListItem[];\n}\n\nexport interface API_MealPlanUpdate {\n  meals: PlannedMeal[];\n}\n\nexport interface API_KrogerAccessRes {\n  expires_in: number;\n  access_token: string;\n  token_type: string;\n}\n\nexport interface AisleLocation {\n  bayNumber: string;\n  description: string;\n  number: string;\n  numberOfFacings: string;\n  sequenceNumber: string;\n  side: string;\n  shelfNumber: string;\n  shelfPositionInBay: string;\n}\n\nexport interface ItemInformation {\n  depth: string;\n  height: string;\n  width: string;\n}\n\nexport interface Temperature {\n  indicator: string;\n  heatSensitive: string;\n}\nexport interface Size {\n  size: string;\n  url: string;\n}\n\nexport interface Image {\n  perspective: string;\n  sizes: Size[];\n  featured?: boolean;\n}\n\nexport interface KrogerProduct {\n  productId: string;\n  upc: string;\n  aisleLocations: any[];\n  brand: string;\n  categories: string[];\n  description: string;\n  images: Image[];\n  items: Item[];\n  itemInformation: ItemInformation;\n  temperature: Temperature;\n}\nexport interface Fulfillment {\n  curbside: boolean;\n  delivery: boolean;\n  inStore: boolean;\n  shipToHome: boolean;\n}\nexport interface Price {\n  regular: number;\n  promo: number;\n}\n\nexport interface Item {\n  itemId: string;\n  favorite: boolean;\n  fulfillment: Fulfillment;\n  price?: Price;\n  size: string;\n  soldBy: string;\n}\nexport interface Pagination {\n  total: string;\n  start: string;\n  limit: string;\n}\n\nexport interface Meta {\n  pagination: Pagination;\n  warnings: string[];\n}\n\nexport interface API_KrogerProdRes {\n  data: KrogerProduct[];\n  meta: Meta;\n}\n\nexport interface KrogerAuthStatus {\n  isAuthorized: boolean;\n}\n\nexport interface KrogerAuthResponse {\n  expires_in: number;\n  access_token: string;\n  token_type: string;\n  refresh_token: string;\n}\n\n/**\n * Used for searching on a recipe website\n */\nexport interface RecipeSearchParams {\n  query: string;\n}\nexport interface RecipeDataParams {\n  url: string;\n}\n\nexport interface RecipeSearchData {\n  name: string;\n  url: string;\n  imageUrl: string;\n  stars: number;\n  reviewCount: number | string;\n}\n\n/** This will exist for All Recipe parsings */\nexport interface ParsedRecipeData {\n  ingredients: string[];\n  steps: string[];\n\n  prepTime: string;\n  cookTime: string;\n  totalTime: string;\n  servings: string;\n\n  // TODO: add other details like cook time\n}\n","/Users/byronwall/Projects/recipe-app/client/src/Ingredients.tsx",["196","197","198","199","200","201","202","203","204","205","206","207","208","209"],"import { H3, H4, HTMLTable, InputGroup } from \"@blueprintjs/core\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { GLOBAL_DATA_LAYER } from \".\";\nimport { handleStringChange } from \"./helpers\";\nimport { IngredientViewEdit } from \"./Ingredients/IngredientViewEdit\";\nimport { SuggestedIngredients } from \"./Ingredients/SuggestedIngredients\";\nimport { Ingredient, Recipe } from \"./models\";\n\ninterface IngredientsProps {\n    ingredients: Ingredient[];\n    recipes: Recipe[];\n    onSaveNewIngredient(newIngredient: Ingredient): void;\n}\ninterface IngredientsState {\n    newIngredient: Ingredient;\n\n    searchText: string;\n\n    filteredIngredients: Ingredient[];\n}\n\nexport class Ingredients extends React.Component<\n    IngredientsProps,\n    IngredientsState\n> {\n    constructor(props: IngredientsProps) {\n        super(props);\n\n        this.state = {\n            newIngredient: {\n                id: 0,\n                name: \"\",\n                plu: \"\",\n                isGoodName: false,\n                aisle: \"\",\n                comments: \"\",\n            },\n            searchText: \"\",\n            filteredIngredients: props.ingredients.slice(0, 20),\n        };\n    }\n\n    componentDidMount() {}\n\n    componentDidUpdate(\n        prevProps: IngredientsProps,\n        prevState: IngredientsState\n    ) {\n        const didSearchChange = this.state.searchText !== prevState.searchText;\n        const didIngredientsChange = !_.isEqual(\n            this.props.ingredients,\n            prevProps.ingredients\n        );\n\n        if (didSearchChange || didIngredientsChange) {\n            const filteredIngredients = _.sortBy(\n                _.shuffle(\n                    this.props.ingredients.filter(\n                        (c) =>\n                            this.state.searchText === \"\" ||\n                            c.name\n                                .toUpperCase()\n                                .indexOf(this.state.searchText.toUpperCase()) >\n                                -1\n                    )\n                ),\n                (c) => c.isGoodName\n            ).slice(0, 20);\n\n            this.setState({ filteredIngredients });\n        }\n    }\n\n    handleIngredientEdit<K extends keyof Ingredient>(\n        key: K,\n        value: Ingredient[K]\n    ) {\n        const newIngredient = _.cloneDeep(this.state.newIngredient);\n\n        newIngredient[key] = value;\n\n        this.setState({ newIngredient: newIngredient });\n    }\n\n    render() {\n        return (\n            <div>\n                <H3>ingredients</H3>\n\n                <SuggestedIngredients\n                    ingredients={this.props.ingredients}\n                    recipes={this.props.recipes}\n                />\n\n                <div style={{ marginTop: 10 }}>\n                    <H4>all ingredients</H4>\n\n                    <InputGroup\n                        value={this.state.searchText}\n                        onChange={handleStringChange((searchText) =>\n                            this.setState({ searchText: searchText })\n                        )}\n                    />\n\n                    <div>\n                        <HTMLTable condensed striped bordered>\n                            <thead>\n                                <tr>\n                                    <th></th>\n                                    <th>name</th>\n                                    <th>comments</th>\n                                    <th>plu</th>\n                                    <th>aisle</th>\n                                    <th>recipes</th>\n                                    <th>actions</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {this.state.filteredIngredients.map(\n                                    (ingredient) => (\n                                        <IngredientViewEdit\n                                            key={ingredient.id}\n                                            ingredient={ingredient}\n                                            recipes={this.props.recipes}\n                                            onSaveChanges={(newIngred) =>\n                                                GLOBAL_DATA_LAYER.updateIngredient(\n                                                    newIngred\n                                                )\n                                            }\n                                        />\n                                    )\n                                )}\n                            </tbody>\n                        </HTMLTable>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","/Users/byronwall/Projects/recipe-app/client/src/Navigation.tsx",[],"/Users/byronwall/Projects/recipe-app/client/src/HomePage.tsx",["210","211","212","213","214","215"],"import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\ninterface HomePageProps {}\ninterface HomePageState {}\n\nexport class HomePage extends React.Component<HomePageProps, HomePageState> {\n    constructor(props: HomePageProps) {\n        super(props);\n\n        this.state = {};\n    }\n\n    componentDidMount() {}\n\n    componentDidUpdate(prevProps: HomePageProps, prevState: HomePageState) {}\n\n    render() {\n        return <Redirect to=\"/recipes\" />;\n    }\n}\n","/Users/byronwall/Projects/recipe-app/client/src/MealPlan/MealPlan.tsx",["216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236"],"import { Button, H2 } from \"@blueprintjs/core\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { globalLog, GLOBAL_DATA_LAYER } from \"..\";\nimport { getNewId, PlannedMeal, Recipe, ShoppingListItem } from \"../models\";\nimport { ActionsComp } from \"./ActionsComp\";\nimport { MealPlanDay } from \"./MealPlanDay\";\nimport { RecipeChooser } from \"./RecipeChooser\";\n\ninterface MealPlanProps {\n    meals: PlannedMeal[];\n}\ninterface MealPlanState {\n    isRecipeChooserOpen: boolean;\n\n    dateToAddRecipe: Date | undefined;\n\n    viewSettings: MealPlanViewSettings;\n}\n\ninterface MealPlanViewSettings {\n    today: Date;\n    startOfView: Date;\n    endOfView: Date;\n\n    daysToShow: Date[];\n}\n\nconst msInDay = 24 * 3600 * 1000;\n\nexport class MealPlan extends React.Component<MealPlanProps, MealPlanState> {\n    constructor(props: MealPlanProps) {\n        super(props);\n\n        this.state = {\n            isRecipeChooserOpen: false,\n            dateToAddRecipe: undefined,\n            viewSettings: createDefaultView(),\n        };\n    }\n\n    componentDidMount() {}\n\n    componentDidUpdate(prevProps: MealPlanProps, prevState: MealPlanState) {}\n\n    addRecipeForActiveDay(recipe: Recipe): void {\n        const date = this.state.dateToAddRecipe;\n\n        GLOBAL_DATA_LAYER.addMealPlanItem(date, recipe);\n\n        this.setState({\n            dateToAddRecipe: undefined,\n            isRecipeChooserOpen: false,\n        });\n    }\n\n    addNewToShoppingList() {\n        // find the items that are visible\n        const startDate = this.state.viewSettings.startOfView;\n        const endDate = this.state.viewSettings.endOfView;\n        const visibleItems = this.props.meals\n            .filter((c) => c.date <= endDate && c.date >= startDate)\n            .filter((c) => !c.isOnShoppingList);\n\n        // find those not already added\n\n        // add to shopping list\n        const recipes = visibleItems.map((c) =>\n            GLOBAL_DATA_LAYER.getRecipe(c.recipeId)\n        );\n        globalLog(\"add items\", visibleItems, recipes);\n\n        const newShopItems: ShoppingListItem[] = [];\n\n        recipes.forEach((rec) => {\n            rec?.ingredientGroups.forEach((c) =>\n                c.ingredients.forEach((ing) => {\n                    newShopItems.push({\n                        ingredientAmount: ing,\n                        recipeId: rec.id,\n                        isBought: false,\n                        id: getNewId(),\n                    });\n                })\n            );\n        });\n\n        GLOBAL_DATA_LAYER.addItemsToShoppingList(newShopItems);\n\n        const newMeal = _.cloneDeep(visibleItems);\n        newMeal.forEach((c) => (c.isOnShoppingList = true));\n\n        GLOBAL_DATA_LAYER.updateMealPlan(newMeal);\n    }\n\n    render() {\n        // by default, show the next 2 weeks and previous 1 week -- allow for scrolling to show more\n        // center on today\n\n        // each day needs a button to add a new recipe on that day - open a chooser\n        // allow for a manual entry - choose the day\n\n        // button to create a shopping list from all of the planned meals in the next 2 weeks\n\n        // TODO: cache this stuff out somewhere better\n\n        const {\n            startOfView,\n            endOfView,\n            today,\n            daysToShow,\n        } = this.state.viewSettings;\n\n        return (\n            <div>\n                <ActionsComp>\n                    <Button\n                        text=\"add to shopping list\"\n                        onClick={() => this.addNewToShoppingList()}\n                        icon=\"plus\"\n                        minimal\n                    />\n                </ActionsComp>\n\n                <div>\n                    <H2>meal plan</H2>\n\n                    <div\n                        style={{\n                            display: \"flex\",\n                            flexWrap: \"wrap\",\n                            flexDirection: \"row\",\n                        }}\n                    >\n                        {daysToShow.map((day) => (\n                            <MealPlanDay\n                                key={day.toDateString()}\n                                date={day}\n                                mealsOnDay={GLOBAL_DATA_LAYER.state.plannedMeals.filter(\n                                    (c) =>\n                                        c.date.toDateString() ===\n                                        day.toDateString()\n                                )}\n                                onShowChooserForDay={() => {\n                                    this.setState({\n                                        isRecipeChooserOpen: true,\n                                        dateToAddRecipe: day,\n                                    });\n                                }}\n                                onRemovePlannedMeal={(meal) =>\n                                    GLOBAL_DATA_LAYER.deletePlannedMeal(meal)\n                                }\n                            />\n                        ))}\n                    </div>\n                </div>\n\n                <RecipeChooser\n                    isOpen={this.state.isRecipeChooserOpen}\n                    onClose={() =>\n                        this.setState({ isRecipeChooserOpen: false })\n                    }\n                    onSelect={(recipe) => this.addRecipeForActiveDay(recipe)}\n                />\n            </div>\n        );\n    }\n}\n\nfunction createDefaultView(\n    daysBack = 7,\n    daysForward = 14\n): MealPlanViewSettings {\n    const startOfView = new Date(new Date().getTime() - daysBack * msInDay);\n    const endOfView = new Date(new Date().getTime() + daysForward * msInDay);\n    const today = new Date();\n\n    const daysToShow = getDaysBetween(startOfView, endOfView);\n    return { startOfView, endOfView, today, daysToShow };\n}\n\nexport function getDaysBetween(start: Date, end: Date) {\n    for (\n        // eslint-disable-next-line no-var\n        var arr = [], dt = new Date(start);\n        dt <= end;\n        dt.setDate(dt.getDate() + 1)\n    ) {\n        arr.push(new Date(dt));\n    }\n    return arr;\n}\n","/Users/byronwall/Projects/recipe-app/client/src/Recipes/RecipeList.tsx",["237","238","239","240","241","242","243","244","245","246","247","248","249","250"],"import { Button, H2, HTMLTable, InputGroup } from \"@blueprintjs/core\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { GLOBAL_DATA_LAYER } from \"..\";\nimport { handleStringChange } from \"../helpers\";\nimport { ActionsComp } from \"../MealPlan/ActionsComp\";\nimport { Ingredient, Recipe } from \"../models\";\nimport { OverlayCenter } from \"../OverlayCenter\";\nimport { NewRecipe } from \"./NewRecipe\";\n\ninterface RecipeListProps {\n    recipes: Recipe[];\n}\ninterface RecipeListState {\n    showNewRecipeForm: boolean;\n\n    oldRecipeText: string;\n\n    searchTerm: string;\n    recipesToShow: Recipe[];\n}\n\nexport class RecipeList extends React.Component<\n    RecipeListProps,\n    RecipeListState\n> {\n    constructor(props: RecipeListProps) {\n        super(props);\n\n        this.state = {\n            showNewRecipeForm: false,\n            oldRecipeText: \"\",\n            searchTerm: \"\",\n            recipesToShow: props.recipes,\n        };\n    }\n\n    componentDidMount() {}\n\n    componentDidUpdate(prevProps: RecipeListProps, prevState: RecipeListState) {\n        const didSearchChange = this.state.searchTerm !== prevState.searchTerm;\n        const didRecipesChange = !_.isEqual(\n            this.props.recipes,\n            prevProps.recipes\n        );\n\n        if (didRecipesChange || didSearchChange) {\n            // do the search and update visible recipes\n\n            const recipesToShow = GLOBAL_DATA_LAYER.fuzzyMatchRecipe(\n                this.state.searchTerm\n            );\n            this.setState({ recipesToShow });\n        }\n    }\n\n    saveNewRecipe(newRecipe: Recipe, newIngredients: Ingredient[]) {\n        GLOBAL_DATA_LAYER.saveNewRecipe(newRecipe, newIngredients);\n    }\n\n    removeRecipe(id: number) {\n        const shouldDelete = window.confirm(\n            \"Are you sure you want to delete recipe?\"\n        );\n\n        if (!shouldDelete) {\n            return;\n        }\n        GLOBAL_DATA_LAYER.deleteRecipe(id);\n    }\n\n    render() {\n        const recipesToShow = this.state.recipesToShow;\n        return (\n            <div>\n                <div>\n                    <ActionsComp>\n                        <Button\n                            text=\"add new recipe\"\n                            icon=\"plus\"\n                            intent=\"primary\"\n                            onClick={() =>\n                                this.setState({ showNewRecipeForm: true })\n                            }\n                            minimal\n                        />\n                    </ActionsComp>\n\n                    <OverlayCenter\n                        isOpen={this.state.showNewRecipeForm}\n                        onClose={() =>\n                            this.setState({ showNewRecipeForm: false })\n                        }\n                        height={600}\n                        width={800}\n                    >\n                        <NewRecipe\n                            onSaveRecipe={(newRecipe, newIngredients) =>\n                                this.saveNewRecipe(newRecipe, newIngredients)\n                            }\n                        />\n                    </OverlayCenter>\n\n                    <H2>recipe list</H2>\n\n                    <InputGroup\n                        placeholder=\"search...\"\n                        value={this.state.searchTerm}\n                        onChange={handleStringChange((searchTerm) =>\n                            this.setState({ searchTerm })\n                        )}\n                    />\n\n                    <HTMLTable striped condensed bordered>\n                        <thead>\n                            <tr>\n                                <th></th>\n                                <th>name</th>\n                                <th>actions</th>\n                            </tr>\n                        </thead>\n\n                        <tbody>\n                            {recipesToShow.map((recipe) => (\n                                <tr key={recipe.id}>\n                                    <td>{recipe.id}</td>\n                                    <td>\n                                        <Link to={\"/recipe/\" + recipe.id}>\n                                            <div>{recipe.name}</div>\n                                        </Link>\n                                    </td>\n                                    <td>\n                                        <Button\n                                            icon=\"cross\"\n                                            intent=\"danger\"\n                                            onClick={() =>\n                                                this.removeRecipe(recipe.id)\n                                            }\n                                            minimal\n                                        />\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </HTMLTable>\n                </div>\n            </div>\n        );\n    }\n}\n","/Users/byronwall/Projects/recipe-app/client/src/ShoppingList/ShoppingList.tsx",["251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276"],"import { Button, H2, H3 } from \"@blueprintjs/core\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { globalLog, GLOBAL_DATA_LAYER } from \"..\";\nimport { ActionsComp } from \"../MealPlan/ActionsComp\";\nimport {\n    getNewId,\n    Ingredient,\n    IngredientAmount,\n    Recipe,\n    ShoppingListItem,\n} from \"../models\";\nimport { OverlayCenter } from \"../OverlayCenter\";\nimport { AisleChooser } from \"./AisleChooser\";\nimport { KrogerSearch } from \"./KrogerSearch\";\nimport { ShoppingListGroup } from \"./ShoppingListGroup\";\n\ninterface ShoppingListProps {\n    shoppingList: ShoppingListItem[];\n}\ninterface ShoppingListState {\n    liveShoppingList: ShoppingListItem[];\n\n    isCartAddOpen: boolean;\n    addCartSearchTerm: string;\n    addCartItem: ShoppingListItem | undefined;\n\n    isAisleEditOpen: boolean;\n    itemEditAisle: ShoppingListItem | undefined;\n}\n\nexport function getLooseIngredientAmount(): IngredientAmount {\n    return {\n        amount: 1,\n        ingredientId: -getNewId(),\n        modifier: \"\",\n        unit: \"\",\n    };\n}\n\nexport class ShoppingList extends React.Component<\n    ShoppingListProps,\n    ShoppingListState\n> {\n    constructor(props: ShoppingListProps) {\n        super(props);\n\n        this.state = {\n            liveShoppingList: props.shoppingList,\n\n            isCartAddOpen: false,\n            addCartSearchTerm: \"\",\n            addCartItem: undefined,\n            isAisleEditOpen: false,\n            itemEditAisle: undefined,\n        };\n\n        this.handleItemUpdate = this.handleItemUpdate.bind(this);\n        this.handleNewAisle = this.handleNewAisle.bind(this);\n        this.handleSearchUpdate = this.handleSearchUpdate.bind(this);\n    }\n\n    componentDidMount() {\n        // TODO: get auth status from server\n    }\n\n    componentDidUpdate(prevProps: ShoppingListProps) {\n        // push new props into this list\n        const didPropsListChange = !_.isEqual(\n            this.props.shoppingList,\n            prevProps.shoppingList\n        );\n\n        if (didPropsListChange) {\n            this.setState({ liveShoppingList: this.props.shoppingList });\n        }\n    }\n\n    handleItemUpdate<K extends keyof ShoppingListItem>(\n        id: number,\n        key: K,\n        value: ShoppingListItem[K]\n    ) {\n        const newItems = _.cloneDeep(this.state.liveShoppingList);\n\n        const newItem = newItems.find((c) => c.id === id);\n\n        if (newItem === undefined) {\n            console.error(\"could not find ID?\");\n            return;\n        }\n\n        const itemsToUpdate = [newItem];\n\n        if (key === \"isBought\") {\n            // need to update all with that ingredient id\n            const ingId = newItem.ingredientAmount.ingredientId;\n\n            const isBought = value as boolean;\n\n            newItems\n                .filter((c) => c.id !== id)\n                .filter((c) => c.ingredientAmount.ingredientId === ingId)\n                .forEach((c) => {\n                    c.isBought = isBought;\n\n                    itemsToUpdate.push(c);\n                });\n        }\n\n        newItem[key] = value;\n\n        // update state so changes feel live\n        this.setState({ liveShoppingList: newItems });\n\n        // update server so changes are saved -- this will send props back through\n        GLOBAL_DATA_LAYER.updateShoppingListItem(itemsToUpdate);\n    }\n\n    clearBoughtItems() {\n        const shouldDelete = window.confirm(\n            \"Sure you want to remove all checked items?\"\n        );\n\n        if (!shouldDelete) {\n            return;\n        }\n\n        const idsBoughtItems = this.props.shoppingList\n            .filter((c) => c.isBought)\n            .map((c) => c.id);\n\n        globalLog(\"bought IDs\", idsBoughtItems);\n\n        GLOBAL_DATA_LAYER.deleteShoppingListItems(idsBoughtItems);\n    }\n    clearAllItems() {\n        const shouldDelete = window.confirm(\n            \"Sure you want to remove all items?\"\n        );\n\n        if (!shouldDelete) {\n            return;\n        }\n\n        const idsAllItems = this.props.shoppingList.map((c) => c.id);\n\n        GLOBAL_DATA_LAYER.deleteShoppingListItems(idsAllItems);\n    }\n\n    render() {\n        const shoppingList = this.state.liveShoppingList;\n\n        const activeRecipes = _.uniq(\n            this.state.liveShoppingList.map((c) => c.recipeId)\n        )\n            .map((c) => GLOBAL_DATA_LAYER.getRecipe(c))\n            .filter((c) => c !== undefined) as Recipe[];\n\n        const listGroups = _.groupBy(\n            shoppingList,\n            (c) =>\n                GLOBAL_DATA_LAYER.getIngredient(c.ingredientAmount.ingredientId)\n                    ?.aisle || \"unknown\"\n        );\n\n        const groupNames = Object.keys(listGroups).sort();\n\n        globalLog(\"list groups\", listGroups);\n\n        return (\n            <div>\n                <OverlayCenter\n                    isOpen={this.state.isCartAddOpen}\n                    onClose={() => this.setState({ isCartAddOpen: false })}\n                    height={400}\n                    width={600}\n                >\n                    <KrogerSearch\n                        initialSearch={this.state.addCartSearchTerm}\n                        onMarkComplete={() => this.handleCartComplete()}\n                    />\n                </OverlayCenter>\n\n                <OverlayCenter\n                    isOpen={this.state.isAisleEditOpen}\n                    onClose={() => this.setState({ isAisleEditOpen: false })}\n                    height={200}\n                    width={250}\n                >\n                    <AisleChooser\n                        item={this.state.itemEditAisle}\n                        onNewAisle={(ing, newAisle) => {\n                            this.setState({\n                                isAisleEditOpen: false,\n                                itemEditAisle: undefined,\n                            });\n                            this.updateAisle(ing, newAisle);\n                        }}\n                    />\n                </OverlayCenter>\n\n                <ActionsComp>\n                    <Button\n                        text=\"delete all\"\n                        intent=\"danger\"\n                        onClick={() => this.clearAllItems()}\n                        icon=\"trash\"\n                        minimal\n                    />\n\n                    <Button\n                        text=\"delete bought\"\n                        intent=\"warning\"\n                        onClick={() => this.clearBoughtItems()}\n                        icon=\"small-cross\"\n                        minimal\n                    />\n\n                    <Button\n                        text=\"add loose item\"\n                        onClick={() => this.handleLooseAdd()}\n                        icon=\"plus\"\n                        minimal\n                    />\n                </ActionsComp>\n\n                {!GLOBAL_DATA_LAYER.state.hasKrogerAuth && (\n                    <div>\n                        <Button\n                            text=\"authorize with Kroger\"\n                            onClick={() => this.handleKrogerAuthReq()}\n                        />\n                    </div>\n                )}\n\n                <H2>shopping list</H2>\n\n                <H3>recipes included</H3>\n\n                {activeRecipes.map((recipe) => (\n                    <div key={recipe.id}>\n                        <Button\n                            minimal\n                            intent=\"danger\"\n                            icon=\"cross\"\n                            onClick={() =>\n                                this.removeRecipeFromShoppingList(recipe.id)\n                            }\n                        />\n                        {recipe.name}\n                    </div>\n                ))}\n\n                {groupNames.map((key) => {\n                    const groupOfItems = listGroups[key];\n\n                    return (\n                        <ShoppingListGroup\n                            key={key}\n                            groupOfItems={groupOfItems}\n                            sectionName={key}\n                            handleItemUpdate={this.handleItemUpdate}\n                            handleNewAisle={this.handleNewAisle}\n                            handleSearchUpdate={this.handleSearchUpdate}\n                        />\n                    );\n                })}\n            </div>\n        );\n    }\n\n    /**\n     * Method to add a single \"loose\" item to the shopping list\n     */\n    handleLooseAdd() {\n        const name = window.prompt(\"What item do you want to add?\");\n\n        if (!name) {\n            return;\n        }\n\n        const newItem: ShoppingListItem = {\n            id: getNewId(),\n            ingredientAmount: getLooseIngredientAmount(),\n            isBought: false,\n            recipeId: -1,\n            textOnly: name,\n        };\n\n        GLOBAL_DATA_LAYER.addItemsToShoppingList([newItem]);\n    }\n    handleNewAisle(item: ShoppingListItem) {\n        this.setState({\n            isAisleEditOpen: true,\n            itemEditAisle: item,\n        });\n    }\n    handleCartComplete(): void {\n        // take the active item and mark it bought\n\n        if (this.state.addCartItem === undefined) {\n            return;\n        }\n\n        const newActiveItem = _.cloneDeep(this.state.addCartItem);\n\n        newActiveItem.isBought = true;\n\n        GLOBAL_DATA_LAYER.updateShoppingListItem([newActiveItem]);\n\n        this.setState({ isCartAddOpen: false });\n    }\n    handleSearchUpdate(name: string | undefined, item: ShoppingListItem) {\n        if (name === undefined) {\n            return;\n        }\n\n        this.setState({\n            addCartSearchTerm: name,\n            isCartAddOpen: true,\n            addCartItem: item,\n        });\n    }\n    handleKrogerAuthReq() {\n        const SCOPES = \"product.compact cart.basic:write\";\n\n        const CLIENT_ID =\n            \"wallfamilyrecipes-2bfdb9e9acc3f08e8b36969f52705be43361553067000321029\";\n\n        const REDIRECT_URI =\n            window.location.protocol + \"//\" + window.location.host + \"/auth\";\n\n        const url =\n            \"https://api.kroger.com/v1/connect/oauth2/authorize?scope=\" +\n            encodeURIComponent(SCOPES) +\n            \"&response_type=code&client_id=\" +\n            encodeURIComponent(CLIENT_ID) +\n            \"&redirect_uri=\" +\n            encodeURIComponent(REDIRECT_URI);\n\n        window.open(url);\n    }\n    removeRecipeFromShoppingList(id: number) {\n        GLOBAL_DATA_LAYER.removeRecipeFromShoppingList(id);\n    }\n    updateAisle(ing: Ingredient | undefined, newAisle: string): void {\n        if (ing === undefined || ing.aisle === newAisle) {\n            return;\n        }\n\n        const newIng = _.cloneDeep(ing);\n\n        newIng.aisle = newAisle;\n\n        GLOBAL_DATA_LAYER.updateIngredient(newIng);\n    }\n}\n\nexport function getIngredientText(inAmt: ShoppingListItem) {\n    const amount = inAmt.ingredientAmount.amount;\n    let unit = inAmt.ingredientAmount.unit;\n    if (unit !== \"\") {\n        unit = \" \" + unit;\n    }\n    let modifier = inAmt.ingredientAmount.modifier;\n    if (modifier !== \"\") {\n        modifier = \" (\" + modifier + \")\";\n    }\n    return `${amount}${unit}${modifier}`;\n}\n","/Users/byronwall/Projects/recipe-app/client/src/Recipes/RecipeViewer.tsx",["277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303"],"import { Button, Checkbox, H2, H3, H5 } from \"@blueprintjs/core\";\nimport _ from \"lodash\";\nimport NoSleep from \"nosleep.js\";\nimport React from \"react\";\nimport SplitPane from \"react-split-pane\";\nimport { globalLog, GLOBAL_DATA_LAYER } from \"..\";\nimport { handleBooleanChange } from \"../helpers\";\nimport { ActionsComp } from \"../MealPlan/ActionsComp\";\nimport { Ingredient, IngredientAmount, Recipe } from \"../models\";\nimport { EditRecipe } from \"./EditRecipe\";\n\ninterface RecipeViewerProps {\n    recipe: Recipe | undefined;\n}\n\ntype StringHash = { [key: string]: boolean };\n\ninterface RecipeViewerState {\n    isEditMode: boolean;\n\n    isCookingMode: boolean;\n    isScreenLockedOn: boolean;\n\n    stepsComplete: StringHash;\n    ingredientsComplete: StringHash;\n}\n\nexport class RecipeViewer extends React.Component<\n    RecipeViewerProps,\n    RecipeViewerState\n> {\n    noSleep = new NoSleep();\n\n    constructor(props: RecipeViewerProps) {\n        super(props);\n\n        this.state = {\n            isEditMode: false,\n            isCookingMode: false,\n            ingredientsComplete: {},\n            stepsComplete: {},\n            isScreenLockedOn: false,\n        };\n    }\n\n    componentDidMount() {}\n\n    componentWillUnmount() {\n        this.noSleep.disable();\n    }\n\n    componentDidUpdate(\n        prevProps: RecipeViewerProps,\n        prevState: RecipeViewerState\n    ) {}\n\n    handleIngredientCheck(\n        grpIndex: number,\n        itemIndex: number,\n        newValue: boolean\n    ) {\n        const items = _.cloneDeep(this.state.ingredientsComplete);\n\n        const key = grpIndex + \"-\" + itemIndex;\n        items[key] = newValue;\n\n        this.setState({ ingredientsComplete: items });\n    }\n\n    getIngredientCheck(grpIndex: number, itemIndex: number) {\n        const items = this.state.ingredientsComplete;\n\n        const key = grpIndex + \"-\" + itemIndex;\n        return items[key] ?? false;\n    }\n\n    handleStepCheck(grpIndex: number, itemIndex: number, newValue: boolean) {\n        const items = _.cloneDeep(this.state.stepsComplete);\n\n        const key = grpIndex + \"-\" + itemIndex;\n        items[key] = newValue;\n\n        this.setState({ stepsComplete: items });\n    }\n\n    getStepCheck(grpIndex: number, itemIndex: number) {\n        const items = this.state.stepsComplete;\n\n        const key = grpIndex + \"-\" + itemIndex;\n        return items[key] ?? false;\n    }\n\n    toggleLockedScreen() {\n        this.setState((prevState) => {\n            const newLock = !prevState.isScreenLockedOn;\n\n            if (newLock) {\n                this.noSleep.enable();\n            } else {\n                this.noSleep.disable();\n            }\n            return { isScreenLockedOn: newLock };\n        });\n    }\n    saveEdits(newRecipe: Recipe): void {\n        globalLog(\"new recipe\", newRecipe);\n        GLOBAL_DATA_LAYER.saveNewRecipe(newRecipe);\n\n        this.setState({ isEditMode: false });\n    }\n\n    render() {\n        const recipe = this.props.recipe;\n\n        if (recipe === undefined) {\n            return \"bad id for recipe\";\n        }\n\n        const ingredientDiv = (\n            <div>\n                <H3>ingredients</H3>\n\n                {recipe.ingredientGroups.map((inGrp, index) => (\n                    <div key={index}>\n                        <H5>{inGrp.title}</H5>\n\n                        <ul>\n                            {inGrp.ingredients.map((inAmt, idx) => {\n                                // need to search for ingredients\n                                const ingredient = GLOBAL_DATA_LAYER.getIngredient(\n                                    inAmt.ingredientId\n                                );\n\n                                const isComplete = this.getIngredientCheck(\n                                    index,\n                                    idx\n                                );\n                                const ingredientText = ingredientToString(\n                                    inAmt,\n                                    ingredient\n                                );\n                                return (\n                                    <li key={idx}>\n                                        {this.state.isCookingMode ? (\n                                            <Checkbox\n                                                label={ingredientText}\n                                                checked={isComplete}\n                                                onChange={handleBooleanChange(\n                                                    (newValue) =>\n                                                        this.handleIngredientCheck(\n                                                            index,\n                                                            idx,\n                                                            newValue\n                                                        )\n                                                )}\n                                                style={{\n                                                    color: isComplete\n                                                        ? \"#ccc\"\n                                                        : undefined,\n                                                }}\n                                            />\n                                        ) : (\n                                            ingredientText\n                                        )}\n                                    </li>\n                                );\n                            })}\n                        </ul>\n                    </div>\n                ))}\n            </div>\n        );\n\n        const recipeContents = (\n            <div>\n                <H3>steps</H3>\n\n                {recipe.stepGroups.map((inGrp, index) => (\n                    <div key={index}>\n                        <H5>{inGrp.title}</H5>\n\n                        <ol>\n                            {inGrp.steps.map((step, idx) => {\n                                const isComplete = this.getStepCheck(\n                                    index,\n                                    idx\n                                );\n                                return (\n                                    <li key={idx}>\n                                        {this.state.isCookingMode ? (\n                                            <Checkbox\n                                                label={step.description}\n                                                checked={isComplete}\n                                                onChange={handleBooleanChange(\n                                                    (newValue) =>\n                                                        this.handleStepCheck(\n                                                            index,\n                                                            idx,\n                                                            newValue\n                                                        )\n                                                )}\n                                                style={{\n                                                    color: isComplete\n                                                        ? \"#ccc\"\n                                                        : undefined,\n                                                }}\n                                            />\n                                        ) : (\n                                            step.description\n                                        )}\n                                    </li>\n                                );\n                            })}\n                        </ol>\n                    </div>\n                ))}\n            </div>\n        );\n\n        const recipeView = (\n            <div>\n                <ActionsComp>\n                    <Button\n                        text=\"add to shopping list\"\n                        minimal\n                        onClick={() => this.handleAddToShopping()}\n                    />\n\n                    <Button\n                        text=\"edit me\"\n                        onClick={() => this.setState({ isEditMode: true })}\n                        minimal\n                    />\n\n                    <Button\n                        text=\"cooking mode\"\n                        onClick={() => this.setState({ isCookingMode: true })}\n                        minimal\n                    />\n                </ActionsComp>\n\n                <H2>{recipe.name}</H2>\n\n                {this.state.isCookingMode ? (\n                    <div\n                        style={{\n                            position: \"absolute\",\n                            height: \"100vh\",\n                            width: \"100vw\",\n                            top: 0,\n                            left: 0,\n                            zIndex: 100,\n                            backgroundColor: \"#fff\",\n                        }}\n                    >\n                        <SplitPane\n                            split=\"horizontal\"\n                            defaultSize={300}\n                            paneStyle={{ overflow: \"auto\" }}\n                        >\n                            {ingredientDiv}\n                            {recipeContents}\n                        </SplitPane>\n\n                        <div\n                            style={{ position: \"absolute\", top: 10, right: 10 }}\n                        >\n                            <Button\n                                minimal\n                                icon=\"flash\"\n                                active={this.state.isScreenLockedOn}\n                                onClick={() => this.toggleLockedScreen()}\n                            />\n\n                            <Button\n                                minimal\n                                icon=\"cross\"\n                                intent=\"danger\"\n                                onClick={() =>\n                                    this.setState({ isCookingMode: false })\n                                }\n                            />\n                        </div>\n                    </div>\n                ) : (\n                    <div>\n                        {ingredientDiv}\n                        {recipeContents}\n                    </div>\n                )}\n            </div>\n        );\n\n        const recipeEdit = (\n            <div>\n                <ActionsComp>\n                    <Button\n                        text=\"cancel edit\"\n                        onClick={() =>\n                            this.setState({\n                                isEditMode: false,\n                            })\n                        }\n                        minimal\n                        intent=\"warning\"\n                        icon=\"undo\"\n                    />\n                </ActionsComp>\n                <EditRecipe\n                    recipe={this.props.recipe}\n                    onSaveRecipe={(newRecipe) => this.saveEdits(newRecipe)}\n                />\n            </div>\n        );\n\n        return this.state.isEditMode ? recipeEdit : recipeView;\n    }\n    handleAddToShopping() {\n        // take the current recipe id and add to shopping list\n        if (this.props.recipe === undefined) {\n            return;\n        }\n\n        const shouldAdd = window.confirm(\n            \"Do you want to add to shopping list?\"\n        );\n\n        if (!shouldAdd) {\n            return;\n        }\n\n        GLOBAL_DATA_LAYER.addRecipesToShoppingList([this.props.recipe]);\n    }\n}\nexport function ingredientToString(\n    inAmt: IngredientAmount,\n    ingredient?: Ingredient\n): string {\n    if (ingredient === undefined) {\n        ingredient = GLOBAL_DATA_LAYER.getIngredient(inAmt.ingredientId);\n    }\n\n    const unit = inAmt.unit === \"\" ? \"\" : \" \" + inAmt.unit;\n\n    const modifier = inAmt.modifier === \"\" ? \"\" : \", \" + inAmt.modifier;\n\n    return `${inAmt.amount}${unit} ${ingredient?.name}${modifier}`;\n}\n","/Users/byronwall/Projects/recipe-app/client/src/helpers.ts",[],"/Users/byronwall/Projects/recipe-app/client/src/Ingredients/IngredientViewEdit.tsx",["304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326"],"import { Button, EditableText, Icon } from \"@blueprintjs/core\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { globalLog } from \"..\";\nimport { Ingredient, Recipe } from \"../models\";\n\ninterface IngredientViewEditProps {\n    ingredient: Ingredient;\n\n    recipes: Recipe[];\n\n    onSaveChanges(newIngredient: Ingredient): void;\n}\ninterface IngredientViewEditState {\n    editIngredient: Ingredient;\n    matchingRecipe: Recipe[];\n}\n\nexport class IngredientViewEdit extends React.Component<\n    IngredientViewEditProps,\n    IngredientViewEditState\n> {\n    constructor(props: IngredientViewEditProps) {\n        super(props);\n\n        this.state = { editIngredient: props.ingredient, matchingRecipe: [] };\n    }\n\n    get isDirty() {\n        return !_.isEqual(this.props.ingredient, this.state.editIngredient);\n    }\n\n    componentDidMount() {\n        this.updateMatchingRecipes();\n    }\n\n    componentDidUpdate(\n        prevProps: IngredientViewEditProps,\n        prevState: IngredientViewEditState\n    ) {\n        const didPropsChange = !_.isEqual(\n            this.props.ingredient,\n            prevProps.ingredient\n        );\n\n        if (didPropsChange) {\n            this.updateMatchingRecipes();\n            this.setState({\n                editIngredient: _.cloneDeep(this.props.ingredient),\n            });\n        }\n    }\n\n    updateMatchingRecipes() {\n        let matches: Recipe[] = [];\n        this.props.recipes.forEach((rec) =>\n            rec.ingredientGroups.forEach((grp) =>\n                grp.ingredients.forEach((ing) => {\n                    if (ing.ingredientId === this.props.ingredient.id) {\n                        matches.push(rec);\n                    }\n                })\n            )\n        );\n\n        matches = _.uniqBy(matches, (c) => c.id);\n\n        this.setState({ matchingRecipe: matches });\n    }\n\n    handleIngredientEdit<K extends keyof Ingredient>(\n        key: K,\n        value: Ingredient[K]\n    ) {\n        const newEditIngredient = _.cloneDeep(this.state.editIngredient);\n\n        newEditIngredient[key] = value;\n\n        this.setState({ editIngredient: newEditIngredient });\n    }\n\n    saveChanges(): void {\n        globalLog(\"save changes\", this.state.editIngredient);\n        this.props.onSaveChanges(this.state.editIngredient);\n    }\n\n    render() {\n        return (\n            <tr>\n                <td>\n                    {this.state.editIngredient.isGoodName && (\n                        <Icon icon=\"star\" intent=\"warning\" />\n                    )}\n                </td>\n                <td>\n                    <EditableText\n                        value={this.state.editIngredient.name}\n                        onChange={(name) =>\n                            this.handleIngredientEdit(\"name\", name)\n                        }\n                        multiline\n                        maxLines={2}\n                    />\n                </td>\n                <td>\n                    <EditableText\n                        value={this.state.editIngredient.comments}\n                        onChange={(comments) =>\n                            this.handleIngredientEdit(\"comments\", comments)\n                        }\n                        placeholder=\"comments\"\n                        multiline\n                        maxLines={2}\n                    />\n                </td>\n                <td>\n                    <EditableText\n                        value={this.state.editIngredient.plu ?? \"\"}\n                        onChange={(plu) =>\n                            this.handleIngredientEdit(\"plu\", plu)\n                        }\n                        placeholder=\"plu\"\n                    />\n                </td>\n                <td>\n                    <EditableText\n                        value={this.state.editIngredient.aisle ?? \"\"}\n                        onChange={(aisle) =>\n                            this.handleIngredientEdit(\"aisle\", aisle)\n                        }\n                        placeholder=\"aisle\"\n                    />\n                </td>\n                <td>\n                    {this.state.matchingRecipe.slice(0, 3).map((rec) => (\n                        <p key={rec.id}>\n                            <Link to={\"/recipe/\" + rec.id}>{rec.name}</Link>\n                        </p>\n                    ))}\n                </td>\n                <td>\n                    {this.isDirty && (\n                        <Button\n                            icon=\"floppy-disk\"\n                            minimal\n                            onClick={() => this.saveChanges()}\n                        />\n                    )}\n                </td>\n            </tr>\n        );\n    }\n}\n","/Users/byronwall/Projects/recipe-app/client/src/Ingredients/SuggestedIngredients.tsx",["327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343"],"import { H4, HTMLTable, InputGroup } from \"@blueprintjs/core\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { globalLog, GLOBAL_DATA_LAYER } from \"..\";\nimport { handleStringChange } from \"../helpers\";\nimport { Ingredient, IngredientAmount, Recipe } from \"../models\";\nimport {\n    getSuggestionsFromLists,\n    NewIngAmt,\n} from \"../Recipes/ingredient_processing\";\nimport { SuggestedIngredientRow } from \"./SuggestedIngredientRow\";\n\nexport type IngredientHash = {\n    [key: number]: IngredientAmount | null;\n};\n\ninterface SuggestedIngredientsProps {\n    recipes: Recipe[];\n    ingredients: Ingredient[];\n}\ninterface SuggestedIngredientsState {\n    ingredientHash: IngredientHash;\n    suggestions: SuggestedIngredient[];\n    searchText: string;\n}\n\nexport interface SuggestedIngredient {\n    originalIngredient: Ingredient;\n    suggestions: NewIngAmt;\n    matchingIngred: Ingredient | undefined;\n}\n\nexport class SuggestedIngredients extends React.Component<\n    SuggestedIngredientsProps,\n    SuggestedIngredientsState\n> {\n    constructor(props: SuggestedIngredientsProps) {\n        super(props);\n\n        const suggestions = getSuggestionsFromLists(\n            props.recipes,\n            props.ingredients,\n            \"\"\n        );\n\n        this.state = { ingredientHash: {}, suggestions, searchText: \"\" };\n    }\n\n    componentDidMount() {}\n\n    componentDidUpdate(\n        prevProps: SuggestedIngredientsProps,\n        prevState: SuggestedIngredientsState\n    ) {\n        const didRecipesChange = !_.isEqual(\n            this.props.recipes,\n            prevProps.recipes\n        );\n\n        const didIngredientsChange = !_.isEqual(\n            this.props.ingredients,\n            prevProps.ingredients\n        );\n\n        const didSearchChange = this.state.searchText !== prevState.searchText;\n\n        if (didRecipesChange || didIngredientsChange || didSearchChange) {\n            this.updateSuggestions();\n        }\n    }\n\n    private updateSuggestions() {\n        const ingredients = this.props.ingredients;\n        const recipes = this.props.recipes;\n        const searchText = this.state.searchText.toUpperCase();\n\n        const suggestions = getSuggestionsFromLists(\n            recipes,\n            ingredients,\n            searchText\n        );\n\n        this.setState({ suggestions });\n    }\n\n    keepSuggestedIngredient(suggestion: SuggestedIngredient) {\n        // find the ingredient -- change its name\n\n        // find the ingredient amount (only 1), change the amount and units\n\n        // save those two items -- ingredient amounts live in a recipe\n\n        // know it's 1:1 -- just search all recipes for now\n\n        const ingredId = suggestion.originalIngredient.id;\n\n        const recipe = this.props.recipes.find((c) =>\n            c.ingredientGroups.some(\n                (grp) =>\n                    grp.ingredients.findIndex(\n                        (d) => d.ingredientId === ingredId\n                    ) > -1\n            )\n        );\n\n        if (recipe === undefined) {\n            console.error(\"recipe not found?\");\n            return;\n        }\n\n        const newIngred = _.cloneDeep(suggestion.originalIngredient);\n        newIngred.name = suggestion.suggestions.newName ?? \"\";\n        newIngred.isGoodName = true;\n\n        const newRecipe = _.cloneDeep(recipe);\n        newRecipe.ingredientGroups.forEach((grp) => {\n            grp.ingredients.forEach((ingAmt) => {\n                if (ingAmt.ingredientId === ingredId) {\n                    // need to update\n                    ingAmt.modifier = suggestion.suggestions.newIng.modifier;\n                    ingAmt.amount = suggestion.suggestions.newIng.amount;\n                    ingAmt.unit = suggestion.suggestions.newIng.unit;\n                    ingAmt.ingredientId =\n                        suggestion.suggestions.newIng.ingredientId;\n                }\n            });\n        });\n\n        globalLog(suggestion, ingredId, recipe);\n\n        if (suggestion.suggestions.newName === undefined) {\n            GLOBAL_DATA_LAYER.updateRecipe(newRecipe);\n        } else {\n            GLOBAL_DATA_LAYER.updateRecipeAndIngredient(newRecipe, newIngred);\n        }\n\n        // TODO: allow generic edits on the item\n\n        // TODO: get each row into its own object with state for edits\n\n        // TODO: take the suggested item and save that to the DB - update the ingredient\n    }\n\n    render() {\n        if (this.state.suggestions.length === 0) {\n            return null;\n        }\n\n        return (\n            <div style={{ marginTop: 10 }}>\n                <H4>new ingredients</H4>\n\n                <p>\n                    All of these are ingredients which are only used once and\n                    which have not been tagged as good.\n                </p>\n\n                <InputGroup\n                    value={this.state.searchText}\n                    onChange={handleStringChange((searchText) =>\n                        this.setState({ searchText })\n                    )}\n                />\n\n                <HTMLTable striped condensed bordered>\n                    <thead>\n                        <tr>\n                            <th>original</th>\n                            <th>new name</th>\n                            <th>new amt</th>\n                            <th>new unit</th>\n                            <th>new modifier</th>\n                            <th>actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.suggestions.map((c, index) => (\n                            <SuggestedIngredientRow\n                                key={index}\n                                onSaveSuggestion={(sugInged) =>\n                                    this.keepSuggestedIngredient(sugInged)\n                                }\n                                sugIngred={c}\n                            />\n                        ))}\n                    </tbody>\n                </HTMLTable>\n            </div>\n        );\n    }\n}\n","/Users/byronwall/Projects/recipe-app/client/src/MealPlan/RecipeChooser.tsx",["344","345","346","347","348","349","350","351","352","353","354"],"import { Button, FormGroup, H5, InputGroup } from \"@blueprintjs/core\";\nimport React from \"react\";\nimport { GLOBAL_DATA_LAYER } from \"..\";\nimport { handleStringChange } from \"../helpers\";\nimport { Recipe } from \"../models\";\nimport { OverlayCenter } from \"../OverlayCenter\";\n\ninterface RecipeChooserProps {\n    isOpen: boolean;\n\n    onClose(): void;\n    onSelect(recipe: Recipe): void;\n}\ninterface RecipeChooserState {\n    searchTerm: string;\n}\n\nexport class RecipeChooser extends React.Component<\n    RecipeChooserProps,\n    RecipeChooserState\n> {\n    constructor(props: RecipeChooserProps) {\n        super(props);\n\n        this.state = { searchTerm: \"\" };\n    }\n\n    componentDidMount() {}\n\n    componentDidUpdate(\n        prevProps: RecipeChooserProps,\n        prevState: RecipeChooserState\n    ) {}\n\n    handleOverlayClose() {\n        this.setState({\n            searchTerm: \"\",\n        });\n        this.props.onClose();\n    }\n\n    render() {\n        // TODO: the event handling here is very hacky\n\n        const possibleRecipes = GLOBAL_DATA_LAYER.fuzzyMatchRecipe(\n            this.state.searchTerm\n        );\n        return (\n            <OverlayCenter\n                onClose={() => {\n                    this.handleOverlayClose();\n                }}\n                isOpen={this.props.isOpen}\n                height={400}\n                width={400}\n            >\n                <H5>search for a recipe</H5>\n                <div>\n                    <FormGroup>\n                        <InputGroup\n                            value={this.state.searchTerm}\n                            onChange={handleStringChange((searchTerm) =>\n                                this.setState({\n                                    searchTerm,\n                                })\n                            )}\n                            autoFocus\n                        />\n                    </FormGroup>\n\n                    <div>\n                        {possibleRecipes.map((recipe) => (\n                            <Button\n                                key={recipe.id}\n                                onClick={() => {\n                                    this.setState({\n                                        searchTerm: \"\",\n                                    });\n                                    this.props.onSelect(recipe);\n                                }}\n                                minimal\n                            >\n                                {recipe.name}\n                            </Button>\n                        ))}\n                    </div>\n                </div>\n            </OverlayCenter>\n        );\n    }\n}\n","/Users/byronwall/Projects/recipe-app/client/src/MealPlan/MealPlanDay.tsx",["355","356","357","358","359","360","361","362","363","364","365","366","367","368"],"import { Button, Card, H5 } from \"@blueprintjs/core\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { GLOBAL_DATA_LAYER } from \"..\";\nimport { PlannedMeal } from \"../models\";\n\ninterface MealPlanDayProps {\n    date: Date;\n    mealsOnDay: PlannedMeal[];\n\n    onShowChooserForDay(): void;\n    onRemovePlannedMeal(meal: PlannedMeal): void;\n}\ninterface MealPlanDayState {}\n\nexport class MealPlanDay extends React.Component<\n    MealPlanDayProps,\n    MealPlanDayState\n> {\n    constructor(props: MealPlanDayProps) {\n        super(props);\n\n        this.state = {};\n    }\n\n    componentDidMount() {}\n\n    componentDidUpdate(\n        prevProps: MealPlanDayProps,\n        prevState: MealPlanDayState\n    ) {}\n\n    processShoppingListClick(meal: PlannedMeal) {\n        const newMeal = _.cloneDeep(meal);\n\n        if (newMeal.isOnShoppingList) {\n            // need to remove from shopping list\n            newMeal.isOnShoppingList = false;\n\n            GLOBAL_DATA_LAYER.removeRecipeFromShoppingList(meal.recipeId);\n        } else {\n            // need to add to shopping list\n            newMeal.isOnShoppingList = true;\n\n            GLOBAL_DATA_LAYER.addRecipesToShoppingList([newMeal.recipeId]);\n        }\n\n        GLOBAL_DATA_LAYER.updateMealPlan([newMeal]);\n    }\n\n    render() {\n        const isHistory = this.props.date < new Date();\n        const isToday =\n            this.props.date.toDateString() === new Date().toDateString();\n        const backgroundColor = isToday\n            ? \"#AD99FF\"\n            : isHistory\n            ? \"#F5F8FA\"\n            : undefined;\n\n        return (\n            <Card style={{ width: 300, backgroundColor }}>\n                <div className=\"flex\" style={{ alignItems: \"center\" }}>\n                    <H5 style={{ marginBottom: 0 }}>\n                        {this.props.date.toLocaleDateString(\"en-US\", {\n                            weekday: \"short\",\n                            month: \"short\",\n                            day: \"2-digit\",\n                        })}\n                    </H5>\n\n                    <Button\n                        onClick={() => this.props.onShowChooserForDay()}\n                        minimal\n                        icon=\"plus\"\n                        intent=\"primary\"\n                    />\n                </div>\n\n                <div\n                    style={{\n                        display: \"flex\",\n                    }}\n                >\n                    {this.props.mealsOnDay.map((meal, index) => {\n                        const recipe = GLOBAL_DATA_LAYER.getRecipe(\n                            meal.recipeId\n                        );\n\n                        if (recipe === undefined) {\n                            return null;\n                        }\n                        return (\n                            <div\n                                key={index}\n                                className=\"flex\"\n                                style={{\n                                    width: 300,\n                                    justifyContent: \"space-between\",\n                                }}\n                            >\n                                <Link to={`/recipe/${recipe.id}`}>\n                                    {recipe.name}\n                                </Link>\n\n                                <div style={{ flexShrink: 0 }}>\n                                    <Button\n                                        icon=\"shopping-cart\"\n                                        onClick={() =>\n                                            this.processShoppingListClick(meal)\n                                        }\n                                        intent=\"primary\"\n                                        small\n                                        active={meal.isOnShoppingList}\n                                        minimal\n                                    />\n                                    <Button\n                                        icon=\"cross\"\n                                        intent=\"danger\"\n                                        onClick={() => this.askRemoveMeal(meal)}\n                                        minimal\n                                    />\n                                </div>\n                            </div>\n                        );\n                    })}\n                </div>\n            </Card>\n        );\n    }\n\n    private askRemoveMeal(meal: PlannedMeal) {\n        const shouldRemove = window.confirm(\n            \"Are you sure you want to remove recipe from meal plan?\"\n        );\n        if (!shouldRemove) {\n            return;\n        }\n        return this.props.onRemovePlannedMeal(meal);\n    }\n}\n","/Users/byronwall/Projects/recipe-app/client/src/Recipes/NewRecipe.tsx",["369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388"],"import { Button, FormGroup, H3, InputGroup } from \"@blueprintjs/core\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { handleStringChange } from \"../helpers\";\nimport { createDefaultRecipe, Ingredient, Recipe } from \"../models\";\nimport {\n    convertTextToIngredientGroup,\n    IngredientGroupEditor,\n} from \"./IngredientGroupEditor\";\nimport { convertTextToStepGroup, StepGroupEditor } from \"./StepGroupEditor\";\n\ninterface NewRecipeProps {\n    defaultRecipe?: Recipe;\n\n    onSaveRecipe(newRecipe: Recipe, newIngredients: Ingredient[]): void;\n}\ninterface NewRecipeState {\n    editRecipe: Recipe;\n\n    textSteps: string;\n    textIngredients: string;\n}\n\nexport class NewRecipe extends React.Component<NewRecipeProps, NewRecipeState> {\n    constructor(props: NewRecipeProps) {\n        super(props);\n\n        const editRecipe = createDefaultRecipe();\n\n        this.state = {\n            editRecipe: this.props.defaultRecipe ?? editRecipe,\n            textIngredients: \"\",\n            textSteps: \"\",\n        };\n    }\n\n    componentDidMount() {}\n\n    componentDidUpdate(prevProps: NewRecipeProps, prevState: NewRecipeState) {\n        const didPropsRecipeChange = !_.isEqual(\n            this.props.defaultRecipe,\n            prevProps.defaultRecipe\n        );\n\n        if (didPropsRecipeChange && this.props.defaultRecipe !== undefined) {\n            // TODO: should probably clone this?\n            this.setState({ editRecipe: this.props.defaultRecipe });\n        }\n    }\n\n    handleRecipeEdit<K extends keyof Recipe>(key: K, value: Recipe[K]) {\n        const newRecipe = _.cloneDeep(this.state.editRecipe);\n\n        newRecipe[key] = value;\n\n        this.setState({ editRecipe: newRecipe });\n    }\n\n    private handleRecipeSave() {\n        const stepGroups = convertTextToStepGroup(this.state.textSteps);\n        const {\n            newIngredientGroup,\n            newIngredients,\n        } = convertTextToIngredientGroup(this.state.textIngredients);\n\n        const recipeToSave = _.clone(this.state.editRecipe);\n        recipeToSave.ingredientGroups = newIngredientGroup;\n        recipeToSave.stepGroups = stepGroups;\n\n        return this.props.onSaveRecipe(recipeToSave, newIngredients);\n    }\n\n    render() {\n        const recipe = this.state.editRecipe;\n\n        const isExistingRecipe = this.props.defaultRecipe !== undefined;\n        return (\n            <div>\n                <H3>create new recipe</H3>\n\n                <FormGroup label=\"name\" inline>\n                    <InputGroup\n                        value={recipe.name}\n                        onChange={handleStringChange((name) =>\n                            this.handleRecipeEdit(\"name\", name)\n                        )}\n                        placeholder=\"recipe name\"\n                    />\n                </FormGroup>\n\n                <FormGroup label=\"description\" inline>\n                    <InputGroup\n                        value={recipe.description}\n                        onChange={handleStringChange((description) =>\n                            this.handleRecipeEdit(\"description\", description)\n                        )}\n                        placeholder=\"recipe description\"\n                    />\n                </FormGroup>\n\n                {isExistingRecipe ? (\n                    <IngredientGroupEditor\n                        ingredientGroups={recipe.ingredientGroups}\n                        onGroupChange={(newList) =>\n                            this.handleRecipeEdit(\"ingredientGroups\", newList)\n                        }\n                    />\n                ) : (\n                    <IngredientGroupEditor\n                        textIngredients={this.state.textIngredients}\n                        onTextChange={(textIngredients) =>\n                            this.setState({ textIngredients })\n                        }\n                    />\n                )}\n\n                {isExistingRecipe ? (\n                    <StepGroupEditor\n                        stepGroups={recipe.stepGroups}\n                        onGroupChange={(newSteps) =>\n                            this.handleRecipeEdit(\"stepGroups\", newSteps)\n                        }\n                    />\n                ) : (\n                    <StepGroupEditor\n                        textSteps={this.state.textSteps}\n                        onTextChange={(textSteps) =>\n                            this.setState({ textSteps })\n                        }\n                    />\n                )}\n\n                <Button\n                    text=\"save\"\n                    icon=\"floppy-disk\"\n                    onClick={() => this.handleRecipeSave()}\n                />\n            </div>\n        );\n    }\n}\n","/Users/byronwall/Projects/recipe-app/client/src/OverlayCenter.tsx",["389","390","391","392","393","394","395","396","397","398","399","400","401","402"],"import { Card, Overlay } from \"@blueprintjs/core\";\nimport React from \"react\";\n\ninterface OverlayCenterProps {\n    isOpen: boolean;\n    onClose(): void;\n\n    height: number;\n    width: number;\n}\ninterface OverlayCenterState {}\n\nexport class OverlayCenter extends React.Component<\n    OverlayCenterProps,\n    OverlayCenterState\n> {\n    constructor(props: OverlayCenterProps) {\n        super(props);\n\n        this.state = {};\n    }\n\n    componentDidMount() {}\n\n    componentDidUpdate(\n        prevProps: OverlayCenterProps,\n        prevState: OverlayCenterState\n    ) {}\n\n    render() {\n        return (\n            <Overlay\n                onClose={() => {\n                    this.props.onClose();\n                }}\n                isOpen={this.props.isOpen}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        height: \"100vh\",\n                        width: \"100vw\",\n                        flexDirection: \"column\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                        padding: 10,\n                    }}\n                    onClick={() => this.props.onClose()}\n                >\n                    <Card\n                        style={{\n                            width: this.props.width,\n                            height: this.props.height,\n                            maxWidth: \"calc(100vw - 20px)\",\n                            maxHeight: \"calc(100vh - 20px)\",\n\n                            overflow: \"auto\",\n                        }}\n                        onClick={(e) => e.stopPropagation()}\n                    >\n                        {this.props.children}\n                    </Card>\n                </div>\n            </Overlay>\n        );\n    }\n}\n","/Users/byronwall/Projects/recipe-app/client/src/ShoppingList/KrogerSearch.tsx",["403","404","405"],"import { Button, InputGroup, Spinner } from \"@blueprintjs/core\";\nimport axios from \"axios\";\nimport React from \"react\";\nimport { globalLog } from \"..\";\nimport { handleStringChange } from \"../helpers\";\nimport { API_KrogerProdRes, API_KrogerSearch, KrogerProduct } from \"../models\";\nimport { KrogerItemDisplay } from \"./KrogerItemDisplay\";\n\ninterface KrogerSearchProps {\n    initialSearch: string;\n\n    onMarkComplete(): void;\n}\ninterface KrogerSearchState {\n    searchTerm: string;\n    searchResults: KrogerProduct[];\n    isLoading: boolean;\n}\n\nexport class KrogerSearch extends React.PureComponent<\n    KrogerSearchProps,\n    KrogerSearchState\n> {\n    constructor(props: KrogerSearchProps) {\n        super(props);\n\n        this.state = {\n            searchTerm: props.initialSearch,\n            searchResults: [],\n            isLoading: false,\n        };\n    }\n\n    componentDidMount() {\n        const { searchTerm } = this.state;\n        if (searchTerm !== \"\") {\n            this.handleSearch();\n        }\n    }\n\n    componentDidUpdate(prevProps: KrogerSearchProps) {\n        const { initialSearch } = this.props;\n        if (initialSearch !== prevProps.initialSearch) {\n            this.setState({ searchTerm: initialSearch }, () =>\n                this.handleSearch()\n            );\n        }\n    }\n\n    private handleSearch = async () => {\n        const { searchTerm } = this.state;\n        // get the search term and hit the api\n\n        this.setState({ isLoading: true });\n\n        const postData: API_KrogerSearch = {\n            filterTerm: searchTerm,\n        };\n\n        const res = await axios.post<API_KrogerProdRes>(\n            \"/api/kroger_search\",\n            postData\n        );\n\n        if (res.data?.data) {\n            globalLog(\"kroger return\", res.data);\n\n            this.setState({ searchResults: res.data.data });\n        } else {\n            globalLog(\"did not receive any search results\");\n        }\n\n        this.setState({ isLoading: false });\n    };\n\n    render() {\n        const { onMarkComplete } = this.props;\n        const { searchTerm, isLoading, searchResults } = this.state;\n        return (\n            <div style={{ display: \"flex\" }}>\n                <div style={{ flexShrink: 0 }}>\n                    <div>\n                        <Button\n                            text=\"mark purchased\"\n                            onClick={onMarkComplete}\n                        />\n                    </div>\n\n                    <div style={{ maxWidth: 130 }}>\n                        <InputGroup\n                            placeholder=\"search term\"\n                            value={searchTerm}\n                            onChange={handleStringChange((searchTerm) =>\n                                this.setState({ searchTerm })\n                            )}\n                        />\n                    </div>\n\n                    <Button\n                        text=\"search\"\n                        onClick={this.handleSearch}\n                        icon=\"search\"\n                    />\n                </div>\n\n                {isLoading && <Spinner />}\n\n                <div className=\"flex\">\n                    {searchResults.map((prod) => (\n                        <KrogerItemDisplay key={prod.upc} product={prod} />\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n","/Users/byronwall/Projects/recipe-app/client/src/Recipes/EditRecipe.tsx",["406","407","408","409","410","411","412","413","414","415","416","417","418"],"import { Button, FormGroup, H2, InputGroup } from \"@blueprintjs/core\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { handleStringChange } from \"../helpers\";\nimport { createDefaultRecipe, Ingredient, Recipe } from \"../models\";\nimport { IngredientGroupEditor } from \"./IngredientGroupEditor\";\nimport { StepGroupEditor } from \"./StepGroupEditor\";\n\ninterface EditRecipeProps {\n    recipe: Recipe | undefined;\n\n    onSaveRecipe(newRecipe: Recipe, newIngredients?: Ingredient[]): void;\n}\ninterface EditRecipeState {\n    editRecipe: Recipe;\n}\n\nexport class EditRecipe extends React.Component<\n    EditRecipeProps,\n    EditRecipeState\n> {\n    constructor(props: EditRecipeProps) {\n        super(props);\n\n        const editRecipe = createDefaultRecipe();\n\n        this.state = {\n            editRecipe: this.props.recipe ?? editRecipe,\n        };\n    }\n\n    componentDidMount() {}\n\n    componentDidUpdate(prevProps: EditRecipeProps, prevState: EditRecipeState) {\n        const didPropsRecipeChange = !_.isEqual(\n            this.props.recipe,\n            prevProps.recipe\n        );\n\n        if (didPropsRecipeChange && this.props.recipe !== undefined) {\n            // TODO: should probably clone this?\n            this.setState({ editRecipe: this.props.recipe });\n        }\n    }\n\n    handleRecipeEdit<K extends keyof Recipe>(key: K, value: Recipe[K]) {\n        const newRecipe = _.cloneDeep(this.state.editRecipe);\n\n        newRecipe[key] = value;\n\n        this.setState({ editRecipe: newRecipe });\n    }\n\n    private handleRecipeSave() {\n        const recipeToSave = this.state.editRecipe;\n\n        return this.props.onSaveRecipe(recipeToSave);\n    }\n\n    render() {\n        const recipe = this.state.editRecipe;\n\n        return (\n            <div>\n                <H2>edit recipe</H2>\n\n                <FormGroup label=\"name\" inline>\n                    <InputGroup\n                        value={recipe.name}\n                        onChange={handleStringChange((name) =>\n                            this.handleRecipeEdit(\"name\", name)\n                        )}\n                        placeholder=\"recipe name\"\n                    />\n                </FormGroup>\n\n                <FormGroup label=\"description\" inline>\n                    <InputGroup\n                        value={recipe.description}\n                        onChange={handleStringChange((description) =>\n                            this.handleRecipeEdit(\"description\", description)\n                        )}\n                        placeholder=\"recipe description\"\n                    />\n                </FormGroup>\n\n                <IngredientGroupEditor\n                    ingredientGroups={recipe.ingredientGroups}\n                    onGroupChange={(newList) =>\n                        this.handleRecipeEdit(\"ingredientGroups\", newList)\n                    }\n                />\n\n                <StepGroupEditor\n                    stepGroups={recipe.stepGroups}\n                    onGroupChange={(newSteps) =>\n                        this.handleRecipeEdit(\"stepGroups\", newSteps)\n                    }\n                />\n\n                <Button\n                    text=\"save\"\n                    icon=\"floppy-disk\"\n                    onClick={() => this.handleRecipeSave()}\n                />\n            </div>\n        );\n    }\n}\n","/Users/byronwall/Projects/recipe-app/client/src/ShoppingList/ShoppingListGroup.tsx",["419","420","421","422","423","424","425"],"import { H3 } from \"@blueprintjs/core\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { ShoppingListItem } from \"../models\";\nimport { ShoppingListGroupItem } from \"./ShoppingListGroupItem\";\n\ninterface ShoppingListGroupProps {\n    sectionName: string;\n    groupOfItems: ShoppingListItem[];\n\n    handleSearchUpdate(name: string | undefined, item: ShoppingListItem): void;\n    handleItemUpdate<K extends keyof ShoppingListItem>(\n        id: number,\n        key: K,\n        value: ShoppingListItem[K]\n    ): void;\n\n    handleNewAisle(item: ShoppingListItem): void;\n}\ninterface ShoppingListGroupState {}\n\nexport class ShoppingListGroup extends React.Component<\n    ShoppingListGroupProps,\n    ShoppingListGroupState\n> {\n    constructor(props: ShoppingListGroupProps) {\n        super(props);\n\n        this.state = {};\n    }\n\n    componentDidMount() {}\n\n    componentDidUpdate(\n        prevProps: ShoppingListGroupProps,\n        prevState: ShoppingListGroupState\n    ) {}\n\n    render() {\n        const { sectionName, groupOfItems } = this.props;\n\n        return (\n            <div key={sectionName} style={{}}>\n                <div style={{ gridColumn: \"1/5\" }}>\n                    <H3>{sectionName}</H3>\n                </div>\n\n                {_.map(\n                    _.groupBy(\n                        groupOfItems,\n                        (c) => c.ingredientAmount.ingredientId\n                    ),\n                    (_item, ingredientId) => {\n                        // TODO: process subsequent items to combine amounts\n\n                        // TODO: show the modifier details\n                        return (\n                            <ShoppingListGroupItem\n                                handleItemUpdate={this.props.handleItemUpdate}\n                                handleNewAisle={this.props.handleNewAisle}\n                                items={_item}\n                                key={ingredientId}\n                            />\n                        );\n                    }\n                )}\n            </div>\n        );\n    }\n}\n","/Users/byronwall/Projects/recipe-app/client/src/ShoppingList/AisleChooser.tsx",["426","427","428","429","430","431","432","433","434","435"],"import { EditableText, H3, H5 } from \"@blueprintjs/core\";\nimport React from \"react\";\nimport { GLOBAL_DATA_LAYER } from \"..\";\nimport { Ingredient, ShoppingListItem } from \"../models\";\n\ninterface AisleChooserProps {\n    item: ShoppingListItem | undefined;\n    onNewAisle(ing: Ingredient, newAisle: string): void;\n}\ninterface AisleChooserState {}\n\nexport class AisleChooser extends React.Component<\n    AisleChooserProps,\n    AisleChooserState\n> {\n    constructor(props: AisleChooserProps) {\n        super(props);\n\n        this.state = {};\n    }\n\n    componentDidMount() {}\n\n    componentDidUpdate(\n        prevProps: AisleChooserProps,\n        prevState: AisleChooserState\n    ) {}\n\n    render() {\n        if (this.props.item === undefined) {\n            return \"item was not found?\";\n        }\n\n        const ing = GLOBAL_DATA_LAYER.getIngredient(\n            this.props.item.ingredientAmount.ingredientId\n        );\n\n        if (ing === undefined) {\n            return \"ingredient was not found?\";\n        }\n\n        return (\n            <div>\n                <H3>edit aisle</H3>\n                <H5>{ing.name}</H5>\n                <p>\n                    your edits will be saved when you hit enter or click off the\n                    text box\n                </p>\n                <H5>\n                    <EditableText\n                        defaultValue={ing?.aisle}\n                        onConfirm={(newAisle) =>\n                            this.props.onNewAisle(ing, newAisle)\n                        }\n                        selectAllOnFocus\n                        isEditing={true}\n                    />\n                </H5>\n            </div>\n        );\n    }\n}\n","/Users/byronwall/Projects/recipe-app/client/src/Recipes/ingredient_processing.ts",["436","437","438","439","440","441","442","443"],"import _ from \"lodash\";\nimport { globalLog, GLOBAL_DATA_LAYER } from \"..\";\nimport {\n    IngredientHash,\n    SuggestedIngredient,\n} from \"../Ingredients/SuggestedIngredients\";\nimport { Ingredient, IngredientAmount, Recipe } from \"../models\";\n\nexport interface NewIngAmt {\n    newName: string | undefined;\n    newIng: IngredientAmount;\n}\n\nexport function guessIngredientParts(\n    input: IngredientAmount\n): NewIngAmt | undefined {\n    const newIngredient = _.cloneDeep(input);\n\n    const result: NewIngAmt = {\n        newIng: newIngredient,\n        newName: undefined,\n    };\n\n    // do some basic processing to guess how to process the text to pieces\n\n    // amount is based on the first numbers(s)\n\n    const numberRegex = /(\\d+(?:(?: \\d+)*[/.]\\d+)?)/;\n\n    const allIngredients = GLOBAL_DATA_LAYER.state.ingredients;\n\n    const ingredient = allIngredients.find(\n        (c) => c.id === newIngredient.ingredientId\n    );\n\n    if (ingredient === undefined) {\n        return undefined;\n    }\n\n    const match = ingredient.name.match(numberRegex);\n    // globalLog(\"number test\", ingredient.name, match);\n    if (match) {\n        newIngredient.amount = match[0];\n    }\n\n    // remove the number and fuzzy search for a unit\n    const newName = ingredient.name\n        .replace(numberRegex, \"\")\n        .trim()\n        .toLowerCase();\n\n    const fuzzyUnits = GLOBAL_DATA_LAYER.state.fuzzyIngredientUnits;\n    const unitSearch = (fuzzyUnits.get as any)(newName, null, 0.25) ?? [];\n\n    if (unitSearch.length) {\n        newIngredient.unit = unitSearch[0][1];\n    }\n\n    // globalLog(\"new name\", newName, unitSearch);\n\n    // now remove the unit from the name\n\n    const newNameWithoutUnit = strReplaceAll(\n        newName,\n        newIngredient.unit,\n        \"\"\n    ).trim();\n\n    globalLog(\"test unit removal\", { newName, newNameWithoutUnit });\n\n    // process the modifier\n\n    const fuzzyMod = GLOBAL_DATA_LAYER.state.fuzzyIngredientMods;\n    const modSearch =\n        (fuzzyMod.get as any)(newNameWithoutUnit, null, 0.25) ?? [];\n\n    if (modSearch.length) {\n        newIngredient.modifier = modSearch[0][1];\n    }\n\n    // now remove the unit from the name\n\n    let newNameWithoutMod = strReplaceAll(\n        newNameWithoutUnit,\n        newIngredient.modifier,\n        \"\"\n    ).trim();\n\n    // clean up the name if possible\n    if (newNameWithoutMod.endsWith(\",\")) {\n        newNameWithoutMod = newNameWithoutMod\n            .substr(0, newNameWithoutMod.length - 1)\n            .trim();\n    }\n\n    // globalLog(\"ingred search\", newNameWithoutUnit);\n\n    // TODO: create a second fuzzy set of known ingredients with good names -- search those\n\n    // unit will be based on a lookup from common units\n    // will need to build this up over time\n    // once built -- will attempt to match on existing ingredient units\n\n    // modifier will be guessed after matching other text to know ingredients?\n\n    // globalLog(\"final ingredient\", newIngredient);\n\n    const fuzzyIngred = GLOBAL_DATA_LAYER.state.fuzzyIngredientNames;\n    const nameSearch =\n        (fuzzyIngred.get as any)(newNameWithoutMod, null, 0.15) ?? [];\n\n    if (nameSearch.length) {\n        const hit = nameSearch[0][1] as string;\n        const ingredId = +hit.split(\"|||\")[1];\n\n        newIngredient.ingredientId = ingredId;\n    } else {\n        result.newName = newNameWithoutMod;\n    }\n    return result;\n}\n\nexport function getSuggestionsFromLists(\n    recipes: Recipe[],\n    ingredients: Ingredient[],\n    searchText: string\n) {\n    const ingredientHash: IngredientHash = {};\n\n    recipes.forEach((r) => {\n        r.ingredientGroups.forEach((g) => {\n            g.ingredients.forEach((i) => {\n                if (ingredientHash[i.ingredientId] === undefined) {\n                    ingredientHash[i.ingredientId] = i;\n                } else {\n                    ingredientHash[i.ingredientId] = null;\n                }\n            });\n        });\n    });\n\n    const suggestions = _.values(ingredientHash)\n        .filter((c) => c !== null)\n\n        .map((c) => c as IngredientAmount)\n        .reduce<SuggestedIngredient[]>((acc, c) => {\n            const ingred = ingredients.find((d) => d.id === c?.ingredientId);\n\n            if (acc.length > 30 || ingred === undefined) {\n                return acc;\n            }\n\n            const doesMatchSearch =\n                searchText === \"\" ||\n                ingred?.name.toUpperCase().indexOf(searchText) > -1;\n\n            if (!doesMatchSearch) {\n                return acc;\n            }\n\n            const newIng = guessIngredientParts(c);\n            if (newIng === undefined || ingred.isGoodName) {\n                return acc;\n            }\n\n            const newSugg: SuggestedIngredient = {\n                originalIngredient: ingred,\n                suggestions: newIng,\n                matchingIngred:\n                    newIng.newName === undefined\n                        ? ingredients.find(\n                              (c) => c.id === newIng.newIng.ingredientId\n                          )\n                        : undefined,\n            };\n\n            acc.push(newSugg);\n\n            return acc;\n        }, [])\n        .filter((c) => c !== undefined)\n        .map((c) => c as SuggestedIngredient);\n    return suggestions;\n}\n\nexport function strReplaceAll(\n    input: string,\n    strReplace: string,\n    strWith: string\n) {\n    // See http://stackoverflow.com/a/3561711/556609\n    const esc = strReplace.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n    const reg = new RegExp(esc, \"ig\");\n    return input.replace(reg, strWith);\n}\n","/Users/byronwall/Projects/recipe-app/client/src/Ingredients/SuggestedIngredientRow.tsx",["444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468"],"import { Button, EditableText } from \"@blueprintjs/core\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { globalLog, GLOBAL_DATA_LAYER } from \"..\";\nimport { Ingredient, IngredientAmount } from \"../models\";\nimport { NewIngAmt } from \"../Recipes/ingredient_processing\";\nimport { IngredientChooserOverlay } from \"./IngredientChooserOverlay\";\nimport { SuggestedIngredient } from \"./SuggestedIngredients\";\n\ninterface SuggestedIngredientRowProps {\n    sugIngred: SuggestedIngredient;\n\n    onSaveSuggestion(sugIngred: SuggestedIngredient): void;\n}\ninterface SuggestedIngredientRowState {\n    editSugIngred: SuggestedIngredient;\n\n    isOverlayOpen: boolean;\n}\n\nexport class SuggestedIngredientRow extends React.Component<\n    SuggestedIngredientRowProps,\n    SuggestedIngredientRowState\n> {\n    constructor(props: SuggestedIngredientRowProps) {\n        super(props);\n\n        this.state = { editSugIngred: props.sugIngred, isOverlayOpen: false };\n    }\n\n    componentDidMount() {}\n\n    componentDidUpdate(\n        prevProps: SuggestedIngredientRowProps,\n        prevState: SuggestedIngredientRowState\n    ) {\n        const didPropsChange = !_.isEqual(\n            this.props.sugIngred,\n            prevProps.sugIngred\n        );\n\n        if (didPropsChange) {\n            this.setState({ editSugIngred: _.cloneDeep(this.props.sugIngred) });\n        }\n    }\n\n    handleSuggestionChange<K extends keyof IngredientAmount>(\n        key: K,\n        value: IngredientAmount[K]\n    ) {\n        this.setState((prevState) => {\n            const newSugIngred = _.cloneDeep(prevState.editSugIngred);\n\n            newSugIngred.suggestions.newIng[key] = value;\n            return { editSugIngred: newSugIngred };\n        });\n    }\n\n    handleNewIngAmtChange<K extends keyof NewIngAmt>(\n        key: K,\n        value: NewIngAmt[K]\n    ) {\n        this.setState((prevState) => {\n            const newSugIngred = _.cloneDeep(prevState.editSugIngred);\n\n            newSugIngred.suggestions[key] = value;\n\n            return { editSugIngred: newSugIngred };\n        });\n    }\n\n    render() {\n        const c = this.state.editSugIngred;\n\n        const ingred = c.originalIngredient;\n\n        const newIng = c.suggestions;\n\n        const editableName = (\n            <div className=\"flex\">\n                <EditableText\n                    value={newIng.newName}\n                    onChange={(newName) =>\n                        this.handleNewIngAmtChange(\"newName\", newName)\n                    }\n                    multiline\n                    maxLines={4}\n                />\n                <Button\n                    icon=\"search\"\n                    minimal\n                    onClick={() => this.setState({ isOverlayOpen: true })}\n                />\n                <IngredientChooserOverlay\n                    isOpen={this.state.isOverlayOpen}\n                    onClose={() => this.setState({ isOverlayOpen: false })}\n                    onItemChosen={(newIngred) =>\n                        this.updateIngredientFromOverlay(newIngred)\n                    }\n                />\n            </div>\n        );\n\n        const didMatchExisting = newIng.newName === undefined;\n\n        const color = didMatchExisting ? \"#f2b195\" : undefined;\n\n        const sugName = (\n            <div>\n                {c.matchingIngred?.name}\n                <Button\n                    icon=\"cross\"\n                    minimal\n                    onClick={() => this.hideSuggestedIngred()}\n                />\n            </div>\n        );\n\n        return (\n            <tr>\n                <td>\n                    <div>\n                        {ingred?.name}\n                        <Button\n                            minimal\n                            icon=\"floppy-disk\"\n                            onClick={() => this.keepOriginal()}\n                        />\n                    </div>\n                </td>\n                <td style={{ backgroundColor: color }}>\n                    {didMatchExisting ? sugName : editableName}\n                </td>\n                <td>\n                    <EditableText\n                        value={newIng.newIng.amount.toString()}\n                        onChange={(amount) =>\n                            this.handleSuggestionChange(\"amount\", amount)\n                        }\n                        placeholder=\"amt\"\n                    />\n                </td>\n                <td>\n                    <EditableText\n                        value={newIng.newIng.unit}\n                        onChange={(unit) =>\n                            this.handleSuggestionChange(\"unit\", unit)\n                        }\n                        placeholder=\"unit\"\n                    />\n                </td>\n\n                <td>\n                    <EditableText\n                        value={newIng.newIng.modifier}\n                        onChange={(modifier) =>\n                            this.handleSuggestionChange(\"modifier\", modifier)\n                        }\n                        placeholder=\"mod\"\n                    />\n                </td>\n                <td>\n                    <Button\n                        text=\"keep\"\n                        onClick={() => this.saveSuggestion()}\n                        minimal\n                    />\n                </td>\n            </tr>\n        );\n    }\n    updateIngredientFromOverlay(newIngred: Ingredient): void {\n        globalLog(\"chosen from chooser\", newIngred);\n        // update the edit ingredient\n        const newSug = _.cloneDeep(this.state.editSugIngred);\n\n        newSug.matchingIngred = newIngred;\n        newSug.suggestions.newIng.ingredientId = newIngred.id;\n        newSug.suggestions.newName = undefined;\n\n        // close the overlay\n\n        this.setState({ isOverlayOpen: false, editSugIngred: newSug });\n    }\n    private keepOriginal() {\n        const newIngred = _.cloneDeep(this.props.sugIngred.originalIngredient);\n        newIngred.isGoodName = true;\n        GLOBAL_DATA_LAYER.updateIngredient(newIngred);\n    }\n\n    hideSuggestedIngred() {\n        this.handleSuggestionChange(\n            \"ingredientId\",\n            this.props.sugIngred.originalIngredient.id\n        );\n        this.handleNewIngAmtChange(\n            \"newName\",\n            this.props.sugIngred.originalIngredient.name\n        );\n    }\n    saveSuggestion() {\n        this.props.onSaveSuggestion(this.state.editSugIngred);\n    }\n}\n","/Users/byronwall/Projects/recipe-app/client/src/Recipes/StepGroupEditor.tsx",["469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494"],"import { Button, EditableText, H3, H4, TextArea } from \"@blueprintjs/core\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { globalLog } from \"..\";\nimport { handleStringChange } from \"../helpers\";\nimport { RecipeStepGroup } from \"../models\";\nimport { StepsEditor } from \"./StepsEditor\";\n\ninterface StepGroupEditorProps {\n    stepGroups?: RecipeStepGroup[];\n    onGroupChange?(newGroups: RecipeStepGroup[]): void;\n\n    textSteps?: string;\n    onTextChange?(newText: string): void; // allow for controlled text version\n}\ninterface StepGroupEditorState {\n    isTextEditor: boolean;\n    textToShow: string;\n}\n\nexport class StepGroupEditor extends React.Component<\n    StepGroupEditorProps,\n    StepGroupEditorState\n> {\n    constructor(props: StepGroupEditorProps) {\n        super(props);\n\n        const isTextInput = this.props.textSteps !== undefined;\n\n        this.state = { isTextEditor: isTextInput, textToShow: \"\" };\n    }\n\n    componentDidMount() {}\n\n    componentDidUpdate(\n        prevProps: StepGroupEditorProps,\n        prevState: StepGroupEditorState\n    ) {}\n\n    handleGroupEdit<K extends keyof RecipeStepGroup>(\n        index: number,\n        key: K,\n        value: RecipeStepGroup[K]\n    ) {\n        if (\n            this.props.stepGroups === undefined ||\n            this.props.onGroupChange === undefined\n        ) {\n            return;\n        }\n        const newSteps = _.cloneDeep(this.props.stepGroups);\n        const newStep = newSteps[index];\n\n        newStep[key] = value;\n\n        this.props.onGroupChange(newSteps);\n    }\n\n    get isControlled() {\n        return this.props.textSteps !== undefined;\n    }\n\n    render() {\n        // TODO: add options to remove or reorder the groups\n\n        const textToShow = this.isControlled\n            ? this.props.textSteps\n            : this.state.textToShow;\n\n        const stepGroups = this.props.stepGroups ?? [];\n        return (\n            <div>\n                <div className=\"flex\" style={{ alignItems: \"center\" }}>\n                    <H3 style={{ marginBottom: 0 }}>steps</H3>\n                    <div style={{ marginLeft: 10 }}>\n                        {!this.isControlled && (\n                            <div>\n                                <Button\n                                    active={this.state.isTextEditor}\n                                    text=\"show text editor\"\n                                    onClick={() => this.toggleTextEditor()}\n                                    minimal\n                                    icon=\"edit\"\n                                />\n                            </div>\n                        )}\n                    </div>\n                </div>\n\n                {this.state.isTextEditor && (\n                    <div>\n                        <TextArea\n                            value={textToShow}\n                            onChange={handleStringChange((textToShow) =>\n                                this.handleTextChange(textToShow)\n                            )}\n                            fill\n                            style={{ height: 170 }}\n                        />\n\n                        {!this.isControlled && (\n                            <Button\n                                text=\"convert to steps\"\n                                onClick={() => this.processTextToSteps()}\n                            />\n                        )}\n                    </div>\n                )}\n\n                {!this.state.isTextEditor &&\n                    stepGroups.map((grp, index) => (\n                        <div key={index}>\n                            <H4>\n                                <EditableText\n                                    onChange={(newValue) =>\n                                        this.handleGroupEdit(\n                                            index,\n                                            \"title\",\n                                            newValue\n                                        )\n                                    }\n                                    value={grp.title}\n                                    placeholder=\"enter group name\"\n                                />\n                            </H4>\n                            <StepsEditor\n                                steps={grp.steps}\n                                onStepsChange={(newSteps) =>\n                                    this.handleGroupEdit(\n                                        index,\n                                        \"steps\",\n                                        newSteps\n                                    )\n                                }\n                            />\n                        </div>\n                    ))}\n            </div>\n        );\n    }\n    private handleTextChange(textToShow: string): void {\n        if (this.isControlled) {\n            if (this.props.onTextChange !== undefined) {\n                this.props.onTextChange(textToShow);\n            }\n        } else {\n            this.setState({ textToShow });\n        }\n    }\n\n    processTextToSteps() {\n        // get the text\n\n        if (this.props.onGroupChange === undefined) {\n            return;\n        }\n\n        const stepsText = this.state.textToShow;\n\n        const newStepGroup = convertTextToStepGroup(stepsText);\n\n        this.props.onGroupChange(newStepGroup);\n    }\n\n    private toggleTextEditor() {\n        const stepGroups = this.props.stepGroups ?? [];\n        const newText = stepGroups.map(groupToString).join(\"\\n\");\n\n        return this.setState((prevState) => ({\n            isTextEditor: !prevState.isTextEditor,\n            textToShow: newText,\n        }));\n    }\n}\n\nexport function groupToString(grp: RecipeStepGroup): string {\n    const stepsStr = grp.steps.map((step) => step.description).join(\"\\n\");\n    return `[${grp.title}]\\n${stepsStr}\\n`;\n}\n\nexport function convertTextToStepGroup(stepsText: string) {\n    const lines = stepsText.split(\"\\n\");\n\n    globalLog(\"split lines\", lines);\n\n    const newStepGroup: RecipeStepGroup[] = [];\n\n    let activeGroup: RecipeStepGroup | undefined = undefined;\n\n    for (const _line of lines) {\n        const line = _line.trim();\n\n        // skip blank\n        if (line.trim() === \"\") {\n            continue;\n        }\n\n        if (line.startsWith(\"[\")) {\n            // make a new group or create the first\n            activeGroup = {\n                title: line.substring(1, line.length - 1),\n                steps: [],\n            };\n\n            newStepGroup.push(activeGroup);\n\n            continue;\n        }\n\n        // this line is a step\n\n        if (activeGroup === undefined) {\n            // create a default group to hold first step\n\n            activeGroup = {\n                title: \"\",\n                steps: [],\n            };\n            newStepGroup.push(activeGroup);\n        }\n\n        activeGroup.steps.push({ description: line, duration: \"0\" });\n\n        globalLog(line);\n    }\n\n    // split into groups\n\n    // split into steps per group\n\n    globalLog(newStepGroup);\n\n    return newStepGroup;\n}\n","/Users/byronwall/Projects/recipe-app/client/src/Recipes/IngredientGroupEditor.tsx",["495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520"],"import { Button, EditableText, H3, H4, TextArea } from \"@blueprintjs/core\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { globalLog, GLOBAL_DATA_LAYER } from \"..\";\nimport { handleStringChange } from \"../helpers\";\nimport { getNewId, Ingredient, IngredientGroup } from \"../models\";\nimport { IngredientsEditor } from \"./IngredientsEditor\";\nimport { ingredientToString } from \"./RecipeViewer\";\n\ninterface IngredientGroupEditorProps {\n    ingredientGroups?: IngredientGroup[];\n\n    textIngredients?: string;\n    onTextChange?(newText: string): void; // allow for controlled text version\n\n    onGroupChange?(newGroups: IngredientGroup[]): void;\n}\n\ninterface IngredientGroupEditorState {\n    isTextEditor: boolean;\n    textToShow: string;\n}\n\nexport class IngredientGroupEditor extends React.Component<\n    IngredientGroupEditorProps,\n    IngredientGroupEditorState\n> {\n    constructor(props: IngredientGroupEditorProps) {\n        super(props);\n\n        const isControlled = props.textIngredients !== undefined;\n\n        this.state = { textToShow: \"\", isTextEditor: isControlled };\n    }\n\n    componentDidMount() {}\n\n    componentDidUpdate(\n        prevProps: IngredientGroupEditorProps,\n        prevState: IngredientGroupEditorState\n    ) {}\n\n    handleGroupEdit<K extends keyof IngredientGroup>(\n        index: number,\n        key: K,\n        value: IngredientGroup[K]\n    ) {\n        if (\n            this.props.ingredientGroups === undefined ||\n            this.props.onGroupChange === undefined\n        ) {\n            return;\n        }\n\n        const newSteps = _.cloneDeep(this.props.ingredientGroups);\n        const newStep = newSteps[index];\n\n        newStep[key] = value;\n\n        this.props.onGroupChange(newSteps);\n    }\n\n    processTextToSteps() {\n        // get the text\n        if (this.props.onGroupChange === undefined) {\n            return;\n        }\n\n        const stepsText = this.state.textToShow;\n\n        const { newIngredientGroup } = convertTextToIngredientGroup(stepsText);\n\n        this.setState({ isTextEditor: false });\n\n        this.props.onGroupChange(newIngredientGroup);\n    }\n\n    render() {\n        // TODO: add options to remove or reorder the groups\n\n        const textToShow = this.props.textIngredients ?? this.state.textToShow;\n\n        const isControlled = this.props.textIngredients !== undefined;\n\n        const ingredientGroups = this.props.ingredientGroups ?? [];\n        return (\n            <div>\n                <div className=\"flex\" style={{ alignItems: \"center\" }}>\n                    <H3 style={{ marginBottom: 0 }}>ingredients</H3>\n                    <div style={{ marginLeft: 10 }}>\n                        {!isControlled && (\n                            <Button\n                                text=\"show text editor\"\n                                active={this.state.isTextEditor}\n                                onClick={() => this.toggleTextEditor()}\n                                icon=\"edit\"\n                                minimal\n                            />\n                        )}\n                    </div>\n                </div>\n\n                {this.state.isTextEditor && (\n                    <div>\n                        <TextArea\n                            value={textToShow}\n                            onChange={handleStringChange((textToShow) =>\n                                this.handleTextChange(textToShow)\n                            )}\n                            fill\n                            style={{ height: 170 }}\n                        />\n\n                        {!isControlled && (\n                            <Button\n                                text=\"convert text\"\n                                onClick={() => this.processTextToSteps()}\n                            />\n                        )}\n                    </div>\n                )}\n\n                {!this.state.isTextEditor &&\n                    ingredientGroups.map((grp, index) => (\n                        <div key={index}>\n                            <H4>\n                                <EditableText\n                                    onChange={(newValue) =>\n                                        this.handleGroupEdit(\n                                            index,\n                                            \"title\",\n                                            newValue\n                                        )\n                                    }\n                                    value={grp.title}\n                                    placeholder=\"group name\"\n                                ></EditableText>\n                            </H4>\n\n                            <IngredientsEditor\n                                ingredientsList={grp.ingredients}\n                                onIngredientsChange={(newSteps) =>\n                                    this.handleGroupEdit(\n                                        index,\n                                        \"ingredients\",\n                                        newSteps\n                                    )\n                                }\n                            />\n                        </div>\n                    ))}\n            </div>\n        );\n    }\n\n    private toggleTextEditor() {\n        this.setState((prevState) => {\n            // get the current ingredients and convert to string\n\n            const textToShow = convertIngredientGroupsToString(\n                this.props.ingredientGroups ?? []\n            );\n\n            return { isTextEditor: !prevState.isTextEditor, textToShow };\n        });\n    }\n\n    private handleTextChange(textToShow: string): void {\n        if (this.props.onTextChange !== undefined) {\n            this.props.onTextChange(textToShow);\n        } else {\n            this.setState({ textToShow });\n        }\n    }\n}\n\nexport function convertIngredientGroupsToString(\n    ingGroups: IngredientGroup[]\n): string {\n    return ingGroups\n        .map((grp) => {\n            const ingStr = grp.ingredients\n                .map((ing) => ingredientToString(ing))\n                .join(\"\\n\");\n            return `[${grp.title}]\\n${ingStr}`;\n        })\n        .join(\"\\n\");\n}\n\nexport function convertTextToIngredientGroup(stepsText: string) {\n    const lines = stepsText.split(\"\\n\");\n\n    globalLog(\"split line\", lines);\n\n    const newIngredientGroup: IngredientGroup[] = [];\n    const newIngredients: Ingredient[] = [];\n\n    let activeGroup: IngredientGroup | undefined = undefined;\n\n    for (const _line of lines) {\n        const line = _line.trim();\n\n        // skip blank\n        if (line.trim() === \"\") {\n            continue;\n        }\n\n        if (line.startsWith(\"[\")) {\n            // make a new group or create the first\n            activeGroup = {\n                title: line.substring(1, line.length - 1),\n                ingredients: [],\n            };\n\n            newIngredientGroup.push(activeGroup);\n\n            continue;\n        }\n\n        // this line is a step\n\n        if (activeGroup === undefined) {\n            // create a default group to hold first step\n\n            activeGroup = {\n                title: \"\",\n                ingredients: [],\n            };\n            newIngredientGroup.push(activeGroup);\n        }\n\n        const newIngred: Ingredient = {\n            id: getNewId(),\n            name: line,\n            plu: \"\",\n            isGoodName: false,\n            aisle: \"\",\n            comments: \"\",\n        };\n\n        GLOBAL_DATA_LAYER.addNewIngredient(newIngred);\n        newIngredients.push(newIngred);\n\n        activeGroup.ingredients.push({\n            amount: \"\",\n            ingredientId: newIngred.id,\n            modifier: \"\",\n            unit: \"\",\n        });\n\n        globalLog(line);\n    }\n\n    return { newIngredientGroup, newIngredients };\n}\n","/Users/byronwall/Projects/recipe-app/client/src/ShoppingList/KrogerItemDisplay.tsx",["521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536"],"import { Button, NumericInput } from \"@blueprintjs/core\";\nimport axios from \"axios\";\nimport React from \"react\";\nimport { globalLog } from \"..\";\nimport {\n    API_KrogerAddCart,\n    API_KrogerAddCartResponse,\n    KrogerProduct,\n} from \"../models\";\n\nenum AddToCartState {\n    NORMAL = 0,\n    ADDING = 1,\n    ADDED = 2,\n    ERROR = 3,\n}\n\ninterface KrogerItemDisplayProps {\n    product: KrogerProduct;\n}\ninterface KrogerItemDisplayState {\n    addCartState: AddToCartState;\n    quantityToAdd: number;\n}\n\nexport class KrogerItemDisplay extends React.Component<\n    KrogerItemDisplayProps,\n    KrogerItemDisplayState\n> {\n    constructor(props: KrogerItemDisplayProps) {\n        super(props);\n\n        this.state = { addCartState: AddToCartState.NORMAL, quantityToAdd: 1 };\n    }\n\n    componentDidMount() {}\n\n    componentDidUpdate(\n        prevProps: KrogerItemDisplayProps,\n        prevState: KrogerItemDisplayState\n    ) {}\n\n    async handleAddToCart(upc: string) {\n        if (this.state.addCartState !== AddToCartState.NORMAL) {\n            return;\n        }\n        // fire off a post\n\n        this.setState({ addCartState: AddToCartState.ADDING });\n\n        const postData: API_KrogerAddCart = {\n            items: [{ quantity: this.state.quantityToAdd, upc }],\n        };\n\n        const url = \"/api/kroger_add_cart\";\n        const result = await axios.post<API_KrogerAddCartResponse>(\n            url,\n            postData\n        );\n        globalLog(\"add cart response\", result);\n\n        if (result.data.result) {\n            this.setState({ addCartState: AddToCartState.ADDED });\n        } else {\n            this.setState({ addCartState: AddToCartState.ERROR });\n        }\n    }\n\n    render() {\n        const prod = this.props.product;\n\n        return (\n            <div\n                key={prod.productId}\n                className=\"flex\"\n                style={{ width: 200, alignItems: \"flex-start\" }}\n            >\n                <div>\n                    <div className=\"flex\">\n                        <NumericInput\n                            value={this.state.quantityToAdd}\n                            onValueChange={(newValue) =>\n                                this.setState({ quantityToAdd: newValue })\n                            }\n                            fill\n                        />\n                        <Button\n                            icon={\n                                this.state.addCartState === AddToCartState.ADDED\n                                    ? \"saved\"\n                                    : this.state.addCartState ===\n                                      AddToCartState.ERROR\n                                    ? \"error\"\n                                    : \"shopping-cart\"\n                            }\n                            onClick={() => this.handleAddToCart(prod.upc)}\n                            disabled={\n                                this.state.addCartState !==\n                                AddToCartState.NORMAL\n                            }\n                        />\n                    </div>\n                    {getProductString(prod)}\n                </div>\n\n                <img\n                    style={{ flexShrink: 0 }}\n                    src={\n                        prod.images\n                            .filter((c) => c.featured)[0]\n                            .sizes.find((c) => c.size === \"small\")?.url\n                    }\n                />\n            </div>\n        );\n    }\n}\n\nfunction getProductString(prod: KrogerProduct) {\n    let price: number | undefined = prod.items[0].price?.promo ?? 0;\n\n    if (price <= 0) {\n        price = prod.items[0].price?.regular ?? undefined;\n    }\n\n    const priceStr = price === undefined ? \"\" : \" | $\" + price.toFixed(2);\n\n    return `${prod.description} | ${prod.items[0].size}${priceStr}`;\n}\n","/Users/byronwall/Projects/recipe-app/client/src/Ingredients/IngredientChooserOverlay.tsx",["537","538","539","540","541","542","543","544","545","546","547","548","549","550"],"import React from \"react\";\nimport { Overlay, Card } from \"@blueprintjs/core\";\nimport { IngredientChooser } from \"../Recipes/IngredientChooser\";\nimport { Ingredient } from \"../models\";\n\ninterface IngredientChooserOverlayProps {\n    isOpen: boolean;\n    onClose(): void;\n\n    onItemChosen(newIngred: Ingredient): void;\n}\ninterface IngredientChooserOverlayState {}\n\nexport class IngredientChooserOverlay extends React.Component<\n    IngredientChooserOverlayProps,\n    IngredientChooserOverlayState\n> {\n    constructor(props: IngredientChooserOverlayProps) {\n        super(props);\n\n        this.state = {};\n    }\n\n    componentDidMount() {}\n\n    componentDidUpdate(\n        prevProps: IngredientChooserOverlayProps,\n        prevState: IngredientChooserOverlayState\n    ) {}\n\n    render() {\n        if (!this.props.isOpen) {\n            return null;\n        }\n\n        return (\n            <Overlay\n                isOpen={this.props.isOpen}\n                onClose={() => this.props.onClose()}\n            >\n                <div\n                    className=\"grid-center\"\n                    onClick={() => this.props.onClose()}\n                >\n                    <Card\n                        style={{ width: 300, height: 300 }}\n                        onClick={(e) => e.stopPropagation()}\n                    >\n                        <IngredientChooser\n                            chosenItem={undefined}\n                            onItemChange={(newItem) =>\n                                this.props.onItemChosen(newItem)\n                            }\n                        />\n                    </Card>\n                </div>\n            </Overlay>\n        );\n    }\n}\n","/Users/byronwall/Projects/recipe-app/client/src/Recipes/StepsEditor.tsx",["551","552","553","554","555","556","557","558","559","560","561","562","563","564"],"import { Button, HTMLTable, InputGroup } from \"@blueprintjs/core\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { handleStringChange } from \"../helpers\";\nimport { RecipeStep } from \"../models\";\n\ninterface StepsEditorProps {\n    steps: RecipeStep[];\n\n    onStepsChange(newSteps: RecipeStep[]): void;\n}\ninterface StepsEditorState {}\n\nexport class StepsEditor extends React.Component<\n    StepsEditorProps,\n    StepsEditorState\n> {\n    constructor(props: StepsEditorProps) {\n        super(props);\n\n        this.state = {};\n    }\n\n    componentDidMount() {}\n\n    componentDidUpdate(\n        prevProps: StepsEditorProps,\n        prevState: StepsEditorState\n    ) {}\n\n    handleStepEdit<K extends keyof RecipeStep>(\n        index: number,\n        key: K,\n        value: RecipeStep[K]\n    ) {\n        const newSteps = _.cloneDeep(this.props.steps);\n        const newStep = newSteps[index];\n\n        newStep[key] = value;\n\n        this.props.onStepsChange(newSteps);\n    }\n\n    render() {\n        return (\n            <div>\n                <HTMLTable striped condensed bordered>\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>duration</th>\n                            <th>step</th>\n                            <th>actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.steps.map((step, index) => (\n                            <tr key={index}>\n                                <td>{index + 1}</td>\n                                <td>\n                                    {\n                                        <InputGroup\n                                            placeholder=\"how long?\"\n                                            value={step.duration}\n                                            onChange={handleStringChange(\n                                                (duration) =>\n                                                    this.handleStepEdit(\n                                                        index,\n                                                        \"duration\",\n                                                        duration\n                                                    )\n                                            )}\n                                        />\n                                    }\n                                </td>\n                                <td>\n                                    <InputGroup\n                                        placeholder=\"what happens?\"\n                                        value={step.description}\n                                        onChange={handleStringChange(\n                                            (description) =>\n                                                this.handleStepEdit(\n                                                    index,\n                                                    \"description\",\n                                                    description\n                                                )\n                                        )}\n                                    />\n                                </td>\n                                <td>\n                                    <Button\n                                        icon=\"cross\"\n                                        intent=\"danger\"\n                                        onClick={() => this.removeStep(index)}\n                                    />\n                                </td>\n                            </tr>\n                        ))}\n                        <tr>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                            <td>\n                                <Button\n                                    icon=\"plus\"\n                                    intent=\"primary\"\n                                    onClick={() => this.addBlankStep()}\n                                />\n                            </td>\n                        </tr>\n                    </tbody>\n                </HTMLTable>\n            </div>\n        );\n    }\n    addBlankStep() {\n        const newSteps = _.cloneDeep(this.props.steps);\n\n        newSteps.push({\n            description: \"\",\n            duration: \"\",\n        });\n\n        this.props.onStepsChange(newSteps);\n    }\n    removeStep(index: number) {\n        const newSteps = _.cloneDeep(this.props.steps);\n\n        newSteps.splice(index, 1);\n\n        this.props.onStepsChange(newSteps);\n    }\n}\n","/Users/byronwall/Projects/recipe-app/client/src/Recipes/IngredientsEditor.tsx",["565","566","567","568","569","570","571","572","573","574","575","576","577","578","579","580","581"],"import { Button, HTMLTable, InputGroup, NumericInput } from \"@blueprintjs/core\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { GLOBAL_DATA_LAYER } from \"..\";\nimport { handleStringChange } from \"../helpers\";\nimport { IngredientAmount } from \"../models\";\nimport { IngredientChooser } from \"./IngredientChooser\";\n\ninterface IngredientsEditorProps {\n    ingredientsList: IngredientAmount[];\n    onIngredientsChange(newList: IngredientAmount[]): void;\n}\ninterface IngredientsEditorState {\n    newIngredient: IngredientAmount;\n}\n\nexport class IngredientsEditor extends React.Component<\n    IngredientsEditorProps,\n    IngredientsEditorState\n> {\n    constructor(props: IngredientsEditorProps) {\n        super(props);\n\n        const newIngredient: IngredientAmount = {\n            amount: 0,\n            ingredientId: 0,\n            modifier: \"\",\n            unit: \"\",\n        };\n\n        this.state = { newIngredient };\n    }\n\n    componentDidMount() {}\n\n    componentDidUpdate(\n        prevProps: IngredientsEditorProps,\n        prevState: IngredientsEditorState\n    ) {}\n\n    handleIngredientAmountEdit<K extends keyof IngredientAmount>(\n        index: number,\n        key: K,\n        value: IngredientAmount[K]\n    ) {\n        const newItems = _.cloneDeep(this.props.ingredientsList);\n        const newItem = newItems[index];\n\n        newItem[key] = value;\n\n        this.props.onIngredientsChange(newItems);\n    }\n\n    handleNewIngredientAmountEdit<K extends keyof IngredientAmount>(\n        key: K,\n        value: IngredientAmount[K]\n    ) {\n        const newItem = _.cloneDeep(this.state.newIngredient);\n\n        newItem[key] = value;\n\n        this.setState({ newIngredient: newItem });\n    }\n\n    render() {\n        return (\n            <div>\n                <HTMLTable striped condensed bordered>\n                    <thead>\n                        <tr>\n                            <th>amount</th>\n                            <th>unit</th>\n                            <th>item</th>\n                            <th>modifier</th>\n                            <th>actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.ingredientsList.map((inAmt, index) => (\n                            <tr key={index}>\n                                <td style={{ width: 120 }}>\n                                    <NumericInput\n                                        value={inAmt.amount}\n                                        onValueChange={(newVal) =>\n                                            this.handleIngredientAmountEdit(\n                                                index,\n                                                \"amount\",\n                                                newVal\n                                            )\n                                        }\n                                        fill\n                                    />\n                                </td>\n\n                                <td>\n                                    <InputGroup\n                                        value={inAmt.unit}\n                                        onChange={handleStringChange((unit) =>\n                                            this.handleIngredientAmountEdit(\n                                                index,\n                                                \"unit\",\n                                                unit\n                                            )\n                                        )}\n                                        fill\n                                    />\n                                </td>\n                                <td>\n                                    <IngredientChooser\n                                        onItemChange={(newIngredient) => {\n                                            GLOBAL_DATA_LAYER.addNewIngredient(\n                                                newIngredient\n                                            );\n                                            this.handleIngredientAmountEdit(\n                                                index,\n                                                \"ingredientId\",\n                                                newIngredient.id\n                                            );\n                                        }}\n                                        chosenItem={GLOBAL_DATA_LAYER.getIngredient(\n                                            inAmt.ingredientId\n                                        )}\n                                    />\n                                </td>\n                                <td>\n                                    <InputGroup\n                                        value={inAmt.modifier}\n                                        onChange={handleStringChange(\n                                            (modifier) =>\n                                                this.handleIngredientAmountEdit(\n                                                    index,\n                                                    \"modifier\",\n                                                    modifier\n                                                )\n                                        )}\n                                        fill\n                                    />\n                                </td>\n                                <td>\n                                    <Button\n                                        icon=\"cross\"\n                                        intent=\"danger\"\n                                        onClick={() =>\n                                            this.removeIngredient(index)\n                                        }\n                                        minimal\n                                    />\n                                </td>\n                            </tr>\n                        ))}\n                        <tr>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                            <td>\n                                <Button\n                                    icon=\"plus\"\n                                    text=\"add blank\"\n                                    intent=\"primary\"\n                                    onClick={() => this.addNewToRecipe()}\n                                    minimal\n                                />\n                            </td>\n                        </tr>\n                    </tbody>\n                </HTMLTable>\n            </div>\n        );\n    }\n    removeIngredient(index: number) {\n        const newItems = _.cloneDeep(this.props.ingredientsList);\n\n        newItems.splice(index, 1);\n\n        this.props.onIngredientsChange(newItems);\n    }\n    addNewToRecipe() {\n        // add the state one to the list\n        const newItems = _.cloneDeep(this.props.ingredientsList);\n\n        newItems.push(this.state.newIngredient);\n\n        this.props.onIngredientsChange(newItems);\n\n        // blank out the new one\n    }\n}\n","/Users/byronwall/Projects/recipe-app/client/src/Recipes/IngredientChooser.tsx",["582","583","584","585","586","587","588","589","590","591","592","593"],"import { MenuItem } from \"@blueprintjs/core\";\nimport { ItemPredicate, ItemRenderer, Suggest } from \"@blueprintjs/select\";\nimport React from \"react\";\nimport { Subscribe } from \"unstated\";\nimport { globalLog } from \"..\";\nimport { DataLayer } from \"../DataLayer\";\nimport { getNewId, Ingredient } from \"../models\";\n\ninterface IngredientChooserProps {\n    chosenItem: Ingredient | undefined;\n    onItemChange(newIngredient: Ingredient): void;\n}\ninterface IngredientChooserState {}\n\nconst IngredientSuggest = Suggest.ofType<Ingredient>();\n\nexport class IngredientChooser extends React.Component<\n    IngredientChooserProps,\n    IngredientChooserState\n> {\n    constructor(props: IngredientChooserProps) {\n        super(props);\n\n        this.state = {};\n    }\n\n    componentDidMount() {}\n\n    componentDidUpdate(\n        prevProps: IngredientChooserProps,\n        prevState: IngredientChooserState\n    ) {}\n\n    render() {\n        return (\n            <Subscribe to={[DataLayer]}>\n                {(data: DataLayer) => (\n                    <div>\n                        <IngredientSuggest\n                            inputValueRenderer={(item) => item.name}\n                            items={data.state.ingredients\n                                .concat(data.state.newIngredients)\n                                .filter((c) => c.isGoodName)}\n                            onItemSelect={(item) =>\n                                this.props.onItemChange(item)\n                            }\n                            itemRenderer={renderFilm}\n                            itemPredicate={filterFilm}\n                            createNewItemFromQuery={createIngredient}\n                            createNewItemRenderer={renderCreateFilmOption}\n                            selectedItem={this.props.chosenItem}\n                            popoverProps={{ minimal: true }}\n                        />\n                    </div>\n                )}\n            </Subscribe>\n        );\n    }\n}\n\nexport const renderCreateFilmOption = (\n    query: string,\n    active: boolean,\n    handleClick: React.MouseEventHandler<HTMLElement>\n) => (\n    <MenuItem\n        icon=\"add\"\n        text={`Create \"${query}\"`}\n        active={active}\n        onClick={handleClick}\n        shouldDismissPopover={false}\n    />\n);\n\nexport const renderFilm: ItemRenderer<Ingredient> = (\n    ingredient,\n    { handleClick, modifiers, query }\n) => {\n    if (!modifiers.matchesPredicate) {\n        return null;\n    }\n    const text = `${ingredient.name}`;\n    return (\n        <MenuItem\n            active={modifiers.active}\n            disabled={modifiers.disabled}\n            label={ingredient.plu}\n            key={ingredient.id}\n            onClick={handleClick}\n            text={highlightText(text, query)}\n        />\n    );\n};\n\nexport const filterFilm: ItemPredicate<Ingredient> = (\n    query,\n    ingredient,\n    _index,\n    exactMatch\n) => {\n    const normalizedTitle = ingredient.name.toLowerCase();\n    const normalizedQuery = query.toLowerCase();\n\n    if (exactMatch) {\n        return normalizedTitle === normalizedQuery;\n    } else {\n        return (\n            `${ingredient.plu}. ${normalizedTitle} ${ingredient.name}`.indexOf(\n                normalizedQuery\n            ) >= 0\n        );\n    }\n};\n\nfunction createIngredient(name: string): Ingredient {\n    const newIngredient: Ingredient = {\n        id: getNewId(),\n        name,\n        plu: \"\",\n        isGoodName: false,\n        aisle: \"\",\n        comments: \"\",\n    };\n\n    globalLog(\"new ingred\", newIngredient);\n\n    // GLOBAL_DATA_LAYER.addNewIngredient(newIngredient);\n\n    return newIngredient;\n}\n\nfunction highlightText(text: string, query: string) {\n    let lastIndex = 0;\n    const words = query\n        .split(/\\s+/)\n        .filter((word) => word.length > 0)\n        .map(escapeRegExpChars);\n    if (words.length === 0) {\n        return [text];\n    }\n    const regexp = new RegExp(words.join(\"|\"), \"gi\");\n    const tokens: React.ReactNode[] = [];\n    while (true) {\n        const match = regexp.exec(text);\n        if (!match) {\n            break;\n        }\n        const length = match[0].length;\n        const before = text.slice(lastIndex, regexp.lastIndex - length);\n        if (before.length > 0) {\n            tokens.push(before);\n        }\n        lastIndex = regexp.lastIndex;\n        tokens.push(<strong key={lastIndex}>{match[0]}</strong>);\n    }\n    const rest = text.slice(lastIndex);\n    if (rest.length > 0) {\n        tokens.push(rest);\n    }\n    return tokens;\n}\n\nfunction escapeRegExpChars(text: string) {\n    return text.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, \"\\\\$1\");\n}\n","/Users/byronwall/Projects/recipe-app/client/src/ShoppingList/ShoppingListGroupItem.tsx",["594","595","596","597","598","599","600","601","602","603","604","605","606","607"],"import { Button, Checkbox } from \"@blueprintjs/core\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { GLOBAL_DATA_LAYER } from \"..\";\nimport { handleBooleanChange } from \"../helpers\";\nimport { ShoppingListItem } from \"../models\";\nimport { KrogerSearch } from \"./KrogerSearch\";\nimport { getIngredientText } from \"./ShoppingList\";\n\ninterface ShoppingListGroupItemProps {\n    handleItemUpdate<K extends keyof ShoppingListItem>(\n        id: number,\n        key: K,\n        value: ShoppingListItem[K]\n    ): void;\n\n    handleNewAisle(item: ShoppingListItem): void;\n\n    items: ShoppingListItem[];\n}\ninterface ShoppingListGroupItemState {\n    hasKrogerSearchOpen: boolean;\n}\n\nexport class ShoppingListGroupItem extends React.Component<\n    ShoppingListGroupItemProps,\n    ShoppingListGroupItemState\n> {\n    constructor(props: ShoppingListGroupItemProps) {\n        super(props);\n\n        this.state = {\n            hasKrogerSearchOpen: false,\n        };\n    }\n\n    componentDidMount() {}\n\n    componentDidUpdate(\n        prevProps: ShoppingListGroupItemProps,\n        prevState: ShoppingListGroupItemState\n    ) {}\n\n    render() {\n        const _item = this.props.items;\n        const item = this.props.items[0];\n        const ing = GLOBAL_DATA_LAYER.getIngredient(\n            item.ingredientAmount.ingredientId\n        );\n        return (\n            <div style={{ display: \"flex\" }} className=\"list-group-item\">\n                <div>\n                    <Checkbox\n                        checked={item.isBought}\n                        onChange={handleBooleanChange((isBought) =>\n                            this.props.handleItemUpdate(\n                                item.id,\n                                \"isBought\",\n                                isBought\n                            )\n                        )}\n                        labelElement={\n                            <span\n                                style={{\n                                    color: item.isBought ? \"grey\" : undefined,\n                                    fontWeight: item.isBought\n                                        ? undefined\n                                        : \"bold\",\n                                }}\n                            >\n                                {item.textOnly ?? ing?.name}\n                            </span>\n                        }\n                    />\n                </div>\n                <div>\n                    {item.isBought\n                        ? null\n                        : _item.map((inAmt) => (\n                              <p key={inAmt.id}>{getIngredientText(inAmt)}</p>\n                          ))}\n                </div>\n\n                <div>\n                    {item.isBought\n                        ? null\n                        : _item.map((inAmt) => (\n                              <p\n                                  key={inAmt.id}\n                                  style={{\n                                      fontStyle: \"italic\",\n                                      textOverflow: \"ellipsis\",\n                                      overflow: \"hidden\",\n                                      whiteSpace: \"nowrap\",\n                                  }}\n                              >\n                                  {\n                                      GLOBAL_DATA_LAYER.getRecipe(\n                                          inAmt.recipeId\n                                      )?.name\n                                  }\n                              </p>\n                          ))}\n                </div>\n\n                <div>\n                    {item.isBought ? null : (\n                        <>\n                            <Button\n                                icon=\"edit\"\n                                onClick={() => this.props.handleNewAisle(item)}\n                                minimal\n                                small\n                            />\n                            <Button\n                                icon=\"search\"\n                                onClick={() =>\n                                    this.setState((prevState) => {\n                                        return {\n                                            hasKrogerSearchOpen: !prevState.hasKrogerSearchOpen,\n                                        };\n                                    })\n                                }\n                                intent=\"primary\"\n                                active={this.state.hasKrogerSearchOpen}\n                                minimal\n                                small\n                            />\n                        </>\n                    )}\n                </div>\n\n                <div style={{ overflow: \"auto\" }}>\n                    {this.state.hasKrogerSearchOpen && (\n                        <KrogerSearch\n                            initialSearch={ing?.name ?? \"\"}\n                            onMarkComplete={() => this.handleCartComplete()}\n                        />\n                    )}\n                </div>\n            </div>\n        );\n    }\n    handleCartComplete(): void {\n        const addCartItem = this.props.items[0];\n        // take the active item and mark it bought\n\n        if (addCartItem === undefined) {\n            return;\n        }\n\n        const newActiveItem = _.cloneDeep(addCartItem);\n\n        newActiveItem.isBought = true;\n\n        GLOBAL_DATA_LAYER.updateShoppingListItem([newActiveItem]);\n\n        this.setState({ hasKrogerSearchOpen: false });\n    }\n}\n","/Users/byronwall/Projects/recipe-app/client/src/MealPlan/ActionsComp.tsx",["608","609","610","611","612","613","614"],"import { H4 } from \"@blueprintjs/core\";\nimport React from \"react\";\n\ninterface ActionsCompProps {}\ninterface ActionsCompState {}\n\nexport class ActionsComp extends React.Component<\n    ActionsCompProps,\n    ActionsCompState\n> {\n    constructor(props: ActionsCompProps) {\n        super(props);\n\n        this.state = {};\n    }\n\n    componentDidMount() {}\n\n    componentDidUpdate(\n        prevProps: ActionsCompProps,\n        prevState: ActionsCompState\n    ) {}\n\n    render() {\n        return (\n            <div className=\"flex\" style={{ alignItems: \"center\" }}>\n                <H4 style={{ marginBottom: 0, color: \"#5C7080\" }}>actions</H4>\n                <div style={{ marginLeft: 10 }}>{this.props.children}</div>\n            </div>\n        );\n    }\n}\n","/Users/byronwall/Projects/recipe-app/client/src/BrowseRecipes.tsx",["615","616","617","618","619","620","621","622","623","624","625","626","627","628","629","630","631"],"import {\n    Button,\n    Card,\n    FormGroup,\n    H2,\n    H3,\n    H4,\n    Icon,\n    InputGroup,\n    Spinner\n} from \"@blueprintjs/core\";\nimport axios from \"axios\";\nimport debug from \"debug\";\nimport React from \"react\";\nimport { BrowseRecipeViewer } from \"./BrowseRecipeViewer\";\nimport { handleStringChange, toPrecisionIfNumber } from \"./helpers\";\nimport { RecipeSearchData, RecipeSearchParams } from \"./models\";\nimport { OverlayCenter } from \"./OverlayCenter\";\n\nconst log = debug(\"recipe:browse\");\n\ninterface BrowseRecipesProps {}\ninterface BrowseRecipesState {\n    searchTerm: string;\n    searchData: RecipeSearchData[];\n\n    viewerItem: RecipeSearchData | undefined;\n    isSearching: boolean;\n}\n\nexport class BrowseRecipes extends React.Component<\n    BrowseRecipesProps,\n    BrowseRecipesState\n> {\n    constructor(props: BrowseRecipesProps) {\n        super(props);\n\n        this.state = {\n            searchTerm: \"\",\n            searchData: [],\n            viewerItem: undefined,\n            isSearching: false,\n        };\n    }\n\n    componentDidMount() {}\n\n    componentDidUpdate(\n        prevProps: BrowseRecipesProps,\n        prevState: BrowseRecipesState\n    ) {}\n\n    render() {\n        return (\n            <div>\n                <H2>find new recipes</H2>\n                <p>\n                    Type a search term to find recipes. Click on the recipe\n                    header to see steps and ingredients and to save.\n                </p>\n                <div className=\"flex\" style={{ alignItems: \"flex-start\" }}>\n                    <FormGroup>\n                        <InputGroup\n                            value={this.state.searchTerm}\n                            onChange={handleStringChange((searchTerm) =>\n                                this.setState({ searchTerm })\n                            )}\n                        />\n                    </FormGroup>\n                    <Button icon=\"search\" onClick={() => this.handleSearch()} />\n                    <Button\n                    text=\"20 random items\"\n                        icon=\"random\"\n                        onClick={() => this.handleRandomSearch()}\n                    />\n                </div>\n\n                {this.state.isSearching && <Spinner />}\n\n                <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n                    {this.state.searchData.map((item) => (\n                        <Card key={item.url} style={{ width: 300 }}>\n                            <H3\n                                className=\"dotdotdot\"\n                                onClick={() => this.handleViewerOpen(item)}\n                                style={{ cursor: \"pointer\", color: \"#0E5A8A\" }}\n                            >\n                                {item.name}\n                            </H3>\n\n                            <H4\n                                style={{\n                                    display: \"flex\",\n                                    alignItems: \"center\",\n                                }}\n                            >\n                                {item.reviewCount} <Icon icon=\"comment\" /> |{\" \"}\n                                {toPrecisionIfNumber(item.stars)}{\" \"}\n                                <Icon icon=\"star\" />\n                            </H4>\n\n                            <img\n                                src={item.imageUrl}\n                                style={{ maxWidth: \"100%\" }}\n                            />\n                        </Card>\n                    ))}\n                </div>\n\n                <OverlayCenter\n                    height={600}\n                    width={600}\n                    isOpen={this.state.viewerItem !== undefined}\n                    onClose={() => this.setState({ viewerItem: undefined })}\n                >\n                    <BrowseRecipeViewer activeItem={this.state.viewerItem} />\n                </OverlayCenter>\n            </div>\n        );\n    }\n\n    /**\n     * This will open the viewer for the given recipe\n     * @param item Item to show\n     */\n    handleViewerOpen(item: RecipeSearchData) {\n        this.setState({ viewerItem: item });\n    }\n\n    /** handle the search button click */\n    async handleSearch() {\n        // fire off a post to the serve\n\n        this.setState({ isSearching: true, searchData: [] });\n\n        const postData: RecipeSearchParams = {\n            query: this.state.searchTerm,\n        };\n\n        const res = await axios.post(\"/api/recipe_search\", postData);\n\n        const data = res.data as RecipeSearchData[];\n        log(\"results\", data);\n\n        this.setState({ searchData: data, isSearching: false });\n    }\n    /** handle the search button click */\n    async handleRandomSearch() {\n        // fire off a post to the serve\n\n        this.setState({ isSearching: true });\n\n        const res = await axios.get(\"/api/recipe_search_random\");\n\n        const data = res.data as RecipeSearchData[];\n        log(\"results\", data);\n\n        this.setState({ searchData: data, isSearching: false });\n    }\n}\n","/Users/byronwall/Projects/recipe-app/client/src/BrowseRecipeViewer.tsx",["632","633","634","635","636","637","638","639","640","641","642","643","644","645","646","647","648","649","650","651","652","653","654","655","656","657","658","659"],"import { Button, H2, H3, Spinner } from \"@blueprintjs/core\";\nimport axios from \"axios\";\nimport React from \"react\";\nimport { GLOBAL_DATA_LAYER, toastHolder } from \".\";\nimport { ActionsComp } from \"./MealPlan/ActionsComp\";\nimport {\n    createDefaultRecipe,\n    ParsedRecipeData,\n    RecipeDataParams,\n    RecipeSearchData,\n} from \"./models\";\nimport { convertTextToIngredientGroup } from \"./Recipes/IngredientGroupEditor\";\nimport { convertTextToStepGroup } from \"./Recipes/StepGroupEditor\";\n\ninterface BrowseRecipeViewerProps {\n    activeItem: RecipeSearchData | undefined;\n}\ninterface BrowseRecipeViewerState {\n    recipeData: ParsedRecipeData | undefined;\n    isSaveButtonActive: boolean;\n}\n\nexport class BrowseRecipeViewer extends React.Component<\n    BrowseRecipeViewerProps,\n    BrowseRecipeViewerState\n> {\n    constructor(props: BrowseRecipeViewerProps) {\n        super(props);\n\n        this.state = { recipeData: undefined, isSaveButtonActive: true };\n    }\n\n    componentDidMount() {\n        this.parseRecipe();\n    }\n\n    /** Load the recipe info from site */\n    async parseRecipe() {\n        // fire off a post to the serve\n\n        if (this.props.activeItem === undefined) {\n            return;\n        }\n\n        const postData: RecipeDataParams = {\n            url: this.props.activeItem.url,\n        };\n\n        const res = await axios.post(\"/api/recipe_data\", postData);\n\n        const data = res.data as ParsedRecipeData;\n\n        this.setState({ recipeData: data });\n    }\n\n    componentDidUpdate(\n        prevProps: BrowseRecipeViewerProps,\n        prevState: BrowseRecipeViewerState\n    ) {}\n\n    render() {\n        if (this.props.activeItem === undefined) {\n            return null;\n        }\n\n        return (\n            <div>\n                <ActionsComp>\n                    <Button\n                        text=\"save recipe\"\n                        icon=\"floppy-disk\"\n                        intent=\"success\"\n                        minimal\n                        onClick={() => this.handleRecipeSave()}\n                        disabled={!this.state.isSaveButtonActive}\n                    />\n\n                    <a\n                        href={this.props.activeItem.url}\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                    >\n                        show on All Recipes\n                    </a>\n                </ActionsComp>\n\n                <div className=\"flex\" style={{ alignItems: \"center\" }}>\n                    <H2>{this.props.activeItem.name}</H2>\n                </div>\n                <img src={this.props.activeItem.imageUrl} />\n\n                {this.state.recipeData === undefined && <Spinner />}\n\n                {this.state.recipeData !== undefined && (\n                    <div>\n                        <H3>stats</H3>\n                        <div>prep time: {this.state.recipeData.prepTime}</div>\n                        <div>cook time: {this.state.recipeData.cookTime}</div>\n                        <div>total time: {this.state.recipeData.totalTime}</div>\n                        <div>servings: {this.state.recipeData.servings}</div>\n\n                        <H3>ingredients</H3>\n\n                        {this.state.recipeData?.ingredients.map((ing, idx) => (\n                            <p key={idx}>{ing}</p>\n                        ))}\n\n                        <H3>steps</H3>\n\n                        {this.state.recipeData?.steps.map((ing, idx) => (\n                            <p key={idx}>{ing}</p>\n                        ))}\n                    </div>\n                )}\n            </div>\n        );\n    }\n    handleRecipeSave() {\n        if (\n            this.state.recipeData === undefined ||\n            this.props.activeItem === undefined\n        ) {\n            return;\n        }\n\n        this.setState({ isSaveButtonActive: false });\n\n        const stepGroups = convertTextToStepGroup(\n            this.state.recipeData.steps.join(\"\\n\")\n        );\n\n        const {\n            newIngredientGroup,\n            newIngredients,\n        } = convertTextToIngredientGroup(\n            this.state.recipeData.ingredients.join(\"\\n\")\n        );\n\n        const recipeToSave = createDefaultRecipe();\n        recipeToSave.name = this.props.activeItem.name;\n        recipeToSave.description = this.props.activeItem.url;\n        recipeToSave.ingredientGroups = newIngredientGroup;\n        recipeToSave.stepGroups = stepGroups;\n\n        GLOBAL_DATA_LAYER.saveNewRecipe(recipeToSave, newIngredients);\n\n        toastHolder.show({\n            message: \"Recipe saved\",\n            intent: \"success\",\n        });\n    }\n}\n",{"ruleId":"660","severity":1,"message":"661","line":40,"column":37,"nodeType":"662","endLine":46,"endColumn":39},{"ruleId":"660","severity":1,"message":"661","line":53,"column":41,"nodeType":"662","endLine":57,"endColumn":42},{"ruleId":"663","severity":1,"message":"664","line":1,"column":17,"nodeType":"665","messageId":"666","endLine":1,"endColumn":30},{"ruleId":"663","severity":1,"message":"667","line":8,"column":5,"nodeType":"665","messageId":"666","endLine":8,"endColumn":20},{"ruleId":"663","severity":1,"message":"668","line":9,"column":5,"nodeType":"665","messageId":"666","endLine":9,"endColumn":23},{"ruleId":"663","severity":1,"message":"669","line":10,"column":5,"nodeType":"665","messageId":"666","endLine":10,"endColumn":26},{"ruleId":"663","severity":1,"message":"670","line":11,"column":5,"nodeType":"665","messageId":"666","endLine":11,"endColumn":20},{"ruleId":"663","severity":1,"message":"671","line":12,"column":5,"nodeType":"665","messageId":"666","endLine":12,"endColumn":20},{"ruleId":"663","severity":1,"message":"672","line":13,"column":5,"nodeType":"665","messageId":"666","endLine":13,"endColumn":23},{"ruleId":"663","severity":1,"message":"673","line":14,"column":5,"nodeType":"665","messageId":"666","endLine":14,"endColumn":29},{"ruleId":"663","severity":1,"message":"674","line":15,"column":5,"nodeType":"665","messageId":"666","endLine":15,"endColumn":23},{"ruleId":"663","severity":1,"message":"675","line":17,"column":5,"nodeType":"665","messageId":"666","endLine":17,"endColumn":15},{"ruleId":"663","severity":1,"message":"676","line":18,"column":5,"nodeType":"665","messageId":"666","endLine":18,"endColumn":16},{"ruleId":"663","severity":1,"message":"677","line":19,"column":5,"nodeType":"665","messageId":"666","endLine":19,"endColumn":11},{"ruleId":"663","severity":1,"message":"678","line":20,"column":5,"nodeType":"665","messageId":"666","endLine":20,"endColumn":12},{"ruleId":"663","severity":1,"message":"679","line":21,"column":5,"nodeType":"665","messageId":"666","endLine":21,"endColumn":21},{"ruleId":"680","severity":1,"message":"681","line":180,"column":19,"nodeType":"682","messageId":"683","endLine":180,"endColumn":22,"suggestions":"684"},{"ruleId":"663","severity":1,"message":"677","line":8,"column":22,"nodeType":"665","messageId":"666","endLine":8,"endColumn":28},{"ruleId":"685","severity":1,"message":"686","line":44,"column":25,"nodeType":"687","messageId":"688","endLine":44,"endColumn":27},{"ruleId":"689","severity":1,"message":"690","line":50,"column":33,"nodeType":"691","endLine":50,"endColumn":54},{"ruleId":"689","severity":1,"message":"692","line":52,"column":13,"nodeType":"691","endLine":52,"endColumn":35},{"ruleId":"689","severity":1,"message":"692","line":59,"column":21,"nodeType":"691","endLine":59,"endColumn":43},{"ruleId":"689","severity":1,"message":"690","line":61,"column":29,"nodeType":"691","endLine":61,"endColumn":50},{"ruleId":"689","severity":1,"message":"690","line":64,"column":42,"nodeType":"691","endLine":64,"endColumn":63},{"ruleId":"689","severity":1,"message":"690","line":79,"column":43,"nodeType":"691","endLine":79,"endColumn":67},{"ruleId":"689","severity":1,"message":"692","line":92,"column":34,"nodeType":"691","endLine":92,"endColumn":56},{"ruleId":"689","severity":1,"message":"692","line":93,"column":30,"nodeType":"691","endLine":93,"endColumn":48},{"ruleId":"689","severity":1,"message":"690","line":100,"column":32,"nodeType":"691","endLine":100,"endColumn":53},{"ruleId":"689","severity":1,"message":"690","line":120,"column":34,"nodeType":"691","endLine":120,"endColumn":64},{"ruleId":"689","severity":1,"message":"692","line":125,"column":54,"nodeType":"691","endLine":125,"endColumn":72},{"ruleId":"660","severity":1,"message":"661","line":126,"column":45,"nodeType":"662","endLine":130,"endColumn":46},{"ruleId":"693","severity":1,"message":"694","line":4,"column":11,"nodeType":"665","messageId":"695","endLine":4,"endColumn":24},{"ruleId":"693","severity":1,"message":"694","line":5,"column":11,"nodeType":"665","messageId":"695","endLine":5,"endColumn":24},{"ruleId":"685","severity":1,"message":"686","line":14,"column":25,"nodeType":"687","messageId":"688","endLine":14,"endColumn":27},{"ruleId":"663","severity":1,"message":"696","line":16,"column":24,"nodeType":"665","messageId":"666","endLine":16,"endColumn":48},{"ruleId":"663","severity":1,"message":"697","line":16,"column":50,"nodeType":"665","messageId":"666","endLine":16,"endColumn":74},{"ruleId":"685","severity":1,"message":"698","line":16,"column":76,"nodeType":"687","messageId":"688","endLine":16,"endColumn":78},{"ruleId":"663","severity":1,"message":"676","line":5,"column":20,"nodeType":"665","messageId":"666","endLine":5,"endColumn":31},{"ruleId":"663","severity":1,"message":"677","line":5,"column":33,"nodeType":"665","messageId":"666","endLine":5,"endColumn":39},{"ruleId":"663","severity":1,"message":"679","line":5,"column":41,"nodeType":"665","messageId":"666","endLine":5,"endColumn":57},{"ruleId":"685","severity":1,"message":"686","line":42,"column":25,"nodeType":"687","messageId":"688","endLine":42,"endColumn":27},{"ruleId":"663","severity":1,"message":"696","line":44,"column":24,"nodeType":"665","messageId":"666","endLine":44,"endColumn":48},{"ruleId":"663","severity":1,"message":"697","line":44,"column":50,"nodeType":"665","messageId":"666","endLine":44,"endColumn":74},{"ruleId":"685","severity":1,"message":"698","line":44,"column":76,"nodeType":"687","messageId":"688","endLine":44,"endColumn":78},{"ruleId":"689","severity":1,"message":"690","line":47,"column":22,"nodeType":"691","endLine":47,"endColumn":48},{"ruleId":"689","severity":1,"message":"690","line":59,"column":27,"nodeType":"691","endLine":59,"endColumn":50},{"ruleId":"689","severity":1,"message":"690","line":60,"column":25,"nodeType":"691","endLine":60,"endColumn":48},{"ruleId":"689","severity":1,"message":"692","line":61,"column":30,"nodeType":"691","endLine":61,"endColumn":46},{"ruleId":"663","severity":1,"message":"699","line":108,"column":13,"nodeType":"665","messageId":"666","endLine":108,"endColumn":24},{"ruleId":"663","severity":1,"message":"700","line":109,"column":13,"nodeType":"665","messageId":"666","endLine":109,"endColumn":22},{"ruleId":"663","severity":1,"message":"701","line":110,"column":13,"nodeType":"665","messageId":"666","endLine":110,"endColumn":18},{"ruleId":"689","severity":1,"message":"690","line":112,"column":13,"nodeType":"691","endLine":112,"endColumn":36},{"ruleId":"660","severity":1,"message":"661","line":119,"column":25,"nodeType":"662","endLine":119,"endColumn":68},{"ruleId":"660","severity":1,"message":"661","line":144,"column":33,"nodeType":"662","endLine":149,"endColumn":35},{"ruleId":"660","severity":1,"message":"661","line":150,"column":33,"nodeType":"662","endLine":152,"endColumn":34},{"ruleId":"689","severity":1,"message":"690","line":159,"column":29,"nodeType":"691","endLine":159,"endColumn":59},{"ruleId":"660","severity":1,"message":"661","line":160,"column":21,"nodeType":"662","endLine":162,"endColumn":22},{"ruleId":"660","severity":1,"message":"661","line":163,"column":21,"nodeType":"662","endLine":163,"endColumn":78},{"ruleId":"663","severity":1,"message":"675","line":8,"column":10,"nodeType":"665","messageId":"666","endLine":8,"endColumn":20},{"ruleId":"663","severity":1,"message":"677","line":8,"column":22,"nodeType":"665","messageId":"666","endLine":8,"endColumn":28},{"ruleId":"702","severity":1,"message":"703","line":33,"column":13,"nodeType":"704","endLine":33,"endColumn":30},{"ruleId":"685","severity":1,"message":"686","line":39,"column":25,"nodeType":"687","messageId":"688","endLine":39,"endColumn":27},{"ruleId":"689","severity":1,"message":"690","line":42,"column":33,"nodeType":"691","endLine":42,"endColumn":54},{"ruleId":"689","severity":1,"message":"692","line":44,"column":13,"nodeType":"691","endLine":44,"endColumn":31},{"ruleId":"689","severity":1,"message":"690","line":52,"column":17,"nodeType":"691","endLine":52,"endColumn":38},{"ruleId":"689","severity":1,"message":"690","line":74,"column":31,"nodeType":"691","endLine":74,"endColumn":55},{"ruleId":"660","severity":1,"message":"661","line":83,"column":29,"nodeType":"662","endLine":85,"endColumn":30},{"ruleId":"689","severity":1,"message":"690","line":91,"column":33,"nodeType":"691","endLine":91,"endColumn":61},{"ruleId":"660","severity":1,"message":"661","line":92,"column":25,"nodeType":"662","endLine":94,"endColumn":26},{"ruleId":"660","severity":1,"message":"661","line":99,"column":29,"nodeType":"662","endLine":101,"endColumn":30},{"ruleId":"689","severity":1,"message":"690","line":109,"column":32,"nodeType":"691","endLine":109,"endColumn":53},{"ruleId":"660","severity":1,"message":"661","line":137,"column":45,"nodeType":"662","endLine":139,"endColumn":46},{"ruleId":"663","severity":1,"message":"675","line":8,"column":5,"nodeType":"665","messageId":"666","endLine":8,"endColumn":15},{"ruleId":"663","severity":1,"message":"705","line":9,"column":5,"nodeType":"665","messageId":"666","endLine":9,"endColumn":21},{"ruleId":"663","severity":1,"message":"677","line":10,"column":5,"nodeType":"665","messageId":"666","endLine":10,"endColumn":11},{"ruleId":"663","severity":1,"message":"679","line":11,"column":5,"nodeType":"665","messageId":"666","endLine":11,"endColumn":21},{"ruleId":"689","severity":1,"message":"692","line":70,"column":13,"nodeType":"691","endLine":70,"endColumn":36},{"ruleId":"689","severity":1,"message":"692","line":75,"column":47,"nodeType":"691","endLine":75,"endColumn":70},{"ruleId":"689","severity":1,"message":"690","line":84,"column":38,"nodeType":"691","endLine":84,"endColumn":65},{"ruleId":"689","severity":1,"message":"692","line":129,"column":32,"nodeType":"691","endLine":129,"endColumn":55},{"ruleId":"689","severity":1,"message":"692","line":146,"column":29,"nodeType":"691","endLine":146,"endColumn":52},{"ruleId":"689","severity":1,"message":"690","line":152,"column":30,"nodeType":"691","endLine":152,"endColumn":57},{"ruleId":"689","severity":1,"message":"690","line":155,"column":13,"nodeType":"691","endLine":155,"endColumn":40},{"ruleId":"689","severity":1,"message":"690","line":174,"column":29,"nodeType":"691","endLine":174,"endColumn":53},{"ruleId":"660","severity":1,"message":"661","line":175,"column":21,"nodeType":"662","endLine":175,"endColumn":76},{"ruleId":"689","severity":1,"message":"690","line":180,"column":40,"nodeType":"691","endLine":180,"endColumn":68},{"ruleId":"660","severity":1,"message":"661","line":181,"column":25,"nodeType":"662","endLine":181,"endColumn":73},{"ruleId":"689","severity":1,"message":"690","line":186,"column":29,"nodeType":"691","endLine":186,"endColumn":55},{"ruleId":"660","severity":1,"message":"661","line":187,"column":21,"nodeType":"662","endLine":187,"endColumn":78},{"ruleId":"689","severity":1,"message":"690","line":192,"column":31,"nodeType":"691","endLine":192,"endColumn":55},{"ruleId":"660","severity":1,"message":"661","line":193,"column":25,"nodeType":"662","endLine":199,"endColumn":27},{"ruleId":"660","severity":1,"message":"661","line":207,"column":25,"nodeType":"662","endLine":207,"endColumn":61},{"ruleId":"660","severity":1,"message":"661","line":215,"column":25,"nodeType":"662","endLine":215,"endColumn":64},{"ruleId":"660","severity":1,"message":"661","line":222,"column":25,"nodeType":"662","endLine":222,"endColumn":62},{"ruleId":"660","severity":1,"message":"661","line":232,"column":29,"nodeType":"662","endLine":232,"endColumn":71},{"ruleId":"660","severity":1,"message":"661","line":247,"column":29,"nodeType":"662","endLine":249,"endColumn":30},{"ruleId":"689","severity":1,"message":"690","line":302,"column":13,"nodeType":"691","endLine":302,"endColumn":35},{"ruleId":"689","severity":1,"message":"690","line":306,"column":43,"nodeType":"691","endLine":306,"endColumn":65},{"ruleId":"663","severity":1,"message":"675","line":9,"column":10,"nodeType":"665","messageId":"666","endLine":9,"endColumn":20},{"ruleId":"663","severity":1,"message":"705","line":9,"column":22,"nodeType":"665","messageId":"666","endLine":9,"endColumn":38},{"ruleId":"663","severity":1,"message":"677","line":9,"column":40,"nodeType":"665","messageId":"666","endLine":9,"endColumn":46},{"ruleId":"685","severity":1,"message":"686","line":46,"column":25,"nodeType":"687","messageId":"688","endLine":46,"endColumn":27},{"ruleId":"663","severity":1,"message":"696","line":53,"column":9,"nodeType":"665","messageId":"666","endLine":53,"endColumn":37},{"ruleId":"663","severity":1,"message":"697","line":54,"column":9,"nodeType":"665","messageId":"666","endLine":54,"endColumn":37},{"ruleId":"685","severity":1,"message":"698","line":55,"column":7,"nodeType":"687","messageId":"688","endLine":55,"endColumn":9},{"ruleId":"689","severity":1,"message":"690","line":62,"column":35,"nodeType":"691","endLine":62,"endColumn":65},{"ruleId":"689","severity":1,"message":"690","line":71,"column":23,"nodeType":"691","endLine":71,"endColumn":53},{"ruleId":"689","severity":1,"message":"690","line":78,"column":35,"nodeType":"691","endLine":78,"endColumn":59},{"ruleId":"689","severity":1,"message":"690","line":87,"column":23,"nodeType":"691","endLine":87,"endColumn":47},{"ruleId":"689","severity":1,"message":"692","line":113,"column":24,"nodeType":"691","endLine":113,"endColumn":41},{"ruleId":"689","severity":1,"message":"690","line":144,"column":42,"nodeType":"691","endLine":144,"endColumn":66},{"ruleId":"689","severity":1,"message":"690","line":190,"column":42,"nodeType":"691","endLine":190,"endColumn":66},{"ruleId":"660","severity":1,"message":"661","line":226,"column":25,"nodeType":"662","endLine":226,"endColumn":67},{"ruleId":"660","severity":1,"message":"661","line":231,"column":25,"nodeType":"662","endLine":231,"endColumn":76},{"ruleId":"660","severity":1,"message":"661","line":237,"column":25,"nodeType":"662","endLine":237,"endColumn":79},{"ruleId":"689","severity":1,"message":"690","line":244,"column":18,"nodeType":"691","endLine":244,"endColumn":42},{"ruleId":"689","severity":1,"message":"690","line":271,"column":41,"nodeType":"691","endLine":271,"endColumn":68},{"ruleId":"660","severity":1,"message":"661","line":272,"column":33,"nodeType":"662","endLine":272,"endColumn":74},{"ruleId":"660","severity":1,"message":"661","line":279,"column":33,"nodeType":"662","endLine":281,"endColumn":34},{"ruleId":"660","severity":1,"message":"661","line":299,"column":25,"nodeType":"662","endLine":303,"endColumn":26},{"ruleId":"689","severity":1,"message":"692","line":310,"column":29,"nodeType":"691","endLine":310,"endColumn":46},{"ruleId":"660","severity":1,"message":"661","line":311,"column":21,"nodeType":"662","endLine":311,"endColumn":76},{"ruleId":"689","severity":1,"message":"690","line":316,"column":16,"nodeType":"691","endLine":316,"endColumn":37},{"ruleId":"689","severity":1,"message":"692","line":320,"column":13,"nodeType":"691","endLine":320,"endColumn":30},{"ruleId":"689","severity":1,"message":"692","line":332,"column":53,"nodeType":"691","endLine":332,"endColumn":70},{"ruleId":"663","severity":1,"message":"677","line":6,"column":22,"nodeType":"665","messageId":"666","endLine":6,"endColumn":28},{"ruleId":"689","severity":1,"message":"692","line":31,"column":27,"nodeType":"691","endLine":31,"endColumn":48},{"ruleId":"689","severity":1,"message":"690","line":31,"column":50,"nodeType":"691","endLine":31,"endColumn":75},{"ruleId":"663","severity":1,"message":"697","line":40,"column":9,"nodeType":"665","messageId":"666","endLine":40,"endColumn":43},{"ruleId":"689","severity":1,"message":"692","line":43,"column":13,"nodeType":"691","endLine":43,"endColumn":34},{"ruleId":"689","severity":1,"message":"692","line":50,"column":45,"nodeType":"691","endLine":50,"endColumn":66},{"ruleId":"689","severity":1,"message":"692","line":57,"column":9,"nodeType":"691","endLine":57,"endColumn":27},{"ruleId":"689","severity":1,"message":"692","line":60,"column":46,"nodeType":"691","endLine":60,"endColumn":67},{"ruleId":"689","severity":1,"message":"690","line":76,"column":47,"nodeType":"691","endLine":76,"endColumn":72},{"ruleId":"689","severity":1,"message":"690","line":84,"column":35,"nodeType":"691","endLine":84,"endColumn":60},{"ruleId":"689","severity":1,"message":"692","line":85,"column":9,"nodeType":"691","endLine":85,"endColumn":33},{"ruleId":"689","severity":1,"message":"690","line":85,"column":34,"nodeType":"691","endLine":85,"endColumn":59},{"ruleId":"689","severity":1,"message":"690","line":92,"column":22,"nodeType":"691","endLine":92,"endColumn":47},{"ruleId":"689","severity":1,"message":"690","line":98,"column":32,"nodeType":"691","endLine":98,"endColumn":57},{"ruleId":"660","severity":1,"message":"661","line":99,"column":25,"nodeType":"662","endLine":101,"endColumn":26},{"ruleId":"689","severity":1,"message":"690","line":108,"column":32,"nodeType":"691","endLine":108,"endColumn":57},{"ruleId":"660","severity":1,"message":"661","line":109,"column":25,"nodeType":"662","endLine":111,"endColumn":26},{"ruleId":"689","severity":1,"message":"690","line":119,"column":32,"nodeType":"691","endLine":119,"endColumn":57},{"ruleId":"660","severity":1,"message":"661","line":120,"column":25,"nodeType":"662","endLine":122,"endColumn":26},{"ruleId":"689","severity":1,"message":"690","line":128,"column":32,"nodeType":"691","endLine":128,"endColumn":57},{"ruleId":"660","severity":1,"message":"661","line":129,"column":25,"nodeType":"662","endLine":131,"endColumn":26},{"ruleId":"689","severity":1,"message":"690","line":136,"column":22,"nodeType":"691","endLine":136,"endColumn":47},{"ruleId":"660","severity":1,"message":"661","line":147,"column":29,"nodeType":"662","endLine":147,"endColumn":63},{"ruleId":"663","severity":1,"message":"675","line":6,"column":10,"nodeType":"665","messageId":"666","endLine":6,"endColumn":20},{"ruleId":"663","severity":1,"message":"705","line":6,"column":22,"nodeType":"665","messageId":"666","endLine":6,"endColumn":38},{"ruleId":"663","severity":1,"message":"677","line":6,"column":40,"nodeType":"665","messageId":"666","endLine":6,"endColumn":46},{"ruleId":"663","severity":1,"message":"706","line":9,"column":5,"nodeType":"665","messageId":"666","endLine":9,"endColumn":14},{"ruleId":"702","severity":1,"message":"707","line":46,"column":24,"nodeType":"704","endLine":46,"endColumn":42},{"ruleId":"685","severity":1,"message":"686","line":49,"column":25,"nodeType":"687","messageId":"688","endLine":49,"endColumn":27},{"ruleId":"689","severity":1,"message":"692","line":56,"column":13,"nodeType":"691","endLine":56,"endColumn":31},{"ruleId":"689","severity":1,"message":"692","line":61,"column":13,"nodeType":"691","endLine":61,"endColumn":35},{"ruleId":"689","severity":1,"message":"690","line":65,"column":33,"nodeType":"691","endLine":65,"endColumn":54},{"ruleId":"689","severity":1,"message":"692","line":73,"column":29,"nodeType":"691","endLine":73,"endColumn":51},{"ruleId":"689","severity":1,"message":"692","line":74,"column":25,"nodeType":"691","endLine":74,"endColumn":43},{"ruleId":"689","severity":1,"message":"690","line":75,"column":28,"nodeType":"691","endLine":75,"endColumn":49},{"ruleId":"689","severity":1,"message":"692","line":97,"column":24,"nodeType":"691","endLine":97,"endColumn":42},{"ruleId":"689","severity":1,"message":"690","line":145,"column":13,"nodeType":"691","endLine":145,"endColumn":35},{"ruleId":"689","severity":1,"message":"690","line":159,"column":28,"nodeType":"691","endLine":159,"endColumn":49},{"ruleId":"689","severity":1,"message":"690","line":177,"column":26,"nodeType":"691","endLine":177,"endColumn":48},{"ruleId":"660","severity":1,"message":"661","line":180,"column":33,"nodeType":"662","endLine":182,"endColumn":34},{"ruleId":"685","severity":1,"message":"686","line":28,"column":25,"nodeType":"687","messageId":"688","endLine":28,"endColumn":27},{"ruleId":"663","severity":1,"message":"696","line":31,"column":9,"nodeType":"665","messageId":"666","endLine":31,"endColumn":38},{"ruleId":"663","severity":1,"message":"697","line":32,"column":9,"nodeType":"665","messageId":"666","endLine":32,"endColumn":38},{"ruleId":"685","severity":1,"message":"698","line":33,"column":7,"nodeType":"687","messageId":"688","endLine":33,"endColumn":9},{"ruleId":"689","severity":1,"message":"692","line":39,"column":9,"nodeType":"691","endLine":39,"endColumn":27},{"ruleId":"689","severity":1,"message":"690","line":46,"column":13,"nodeType":"691","endLine":46,"endColumn":34},{"ruleId":"660","severity":1,"message":"661","line":50,"column":17,"nodeType":"662","endLine":52,"endColumn":19},{"ruleId":"689","severity":1,"message":"692","line":53,"column":25,"nodeType":"691","endLine":53,"endColumn":42},{"ruleId":"689","severity":1,"message":"690","line":61,"column":36,"nodeType":"691","endLine":61,"endColumn":57},{"ruleId":"660","severity":1,"message":"661","line":75,"column":33,"nodeType":"662","endLine":80,"endColumn":35},{"ruleId":"689","severity":1,"message":"692","line":79,"column":37,"nodeType":"691","endLine":79,"endColumn":56},{"ruleId":"693","severity":1,"message":"694","line":15,"column":11,"nodeType":"665","messageId":"695","endLine":15,"endColumn":27},{"ruleId":"685","severity":1,"message":"686","line":27,"column":25,"nodeType":"687","messageId":"688","endLine":27,"endColumn":27},{"ruleId":"663","severity":1,"message":"696","line":30,"column":9,"nodeType":"665","messageId":"666","endLine":30,"endColumn":36},{"ruleId":"663","severity":1,"message":"697","line":31,"column":9,"nodeType":"665","messageId":"666","endLine":31,"endColumn":36},{"ruleId":"685","severity":1,"message":"698","line":32,"column":7,"nodeType":"687","messageId":"688","endLine":32,"endColumn":9},{"ruleId":"689","severity":1,"message":"692","line":53,"column":27,"nodeType":"691","endLine":53,"endColumn":42},{"ruleId":"689","severity":1,"message":"692","line":55,"column":13,"nodeType":"691","endLine":55,"endColumn":28},{"ruleId":"689","severity":1,"message":"692","line":66,"column":26,"nodeType":"691","endLine":66,"endColumn":41},{"ruleId":"660","severity":1,"message":"661","line":74,"column":25,"nodeType":"662","endLine":74,"endColumn":73},{"ruleId":"689","severity":1,"message":"692","line":74,"column":40,"nodeType":"691","endLine":74,"endColumn":70},{"ruleId":"689","severity":1,"message":"692","line":86,"column":22,"nodeType":"691","endLine":86,"endColumn":43},{"ruleId":"660","severity":1,"message":"661","line":110,"column":41,"nodeType":"662","endLine":112,"endColumn":42},{"ruleId":"660","severity":1,"message":"661","line":121,"column":41,"nodeType":"662","endLine":121,"endColumn":81},{"ruleId":"689","severity":1,"message":"692","line":140,"column":16,"nodeType":"691","endLine":140,"endColumn":46},{"ruleId":"689","severity":1,"message":"692","line":31,"column":25,"nodeType":"691","endLine":31,"endColumn":49},{"ruleId":"685","severity":1,"message":"686","line":37,"column":25,"nodeType":"687","messageId":"688","endLine":37,"endColumn":27},{"ruleId":"663","severity":1,"message":"697","line":39,"column":51,"nodeType":"665","messageId":"666","endLine":39,"endColumn":76},{"ruleId":"689","severity":1,"message":"692","line":41,"column":13,"nodeType":"691","endLine":41,"endColumn":37},{"ruleId":"689","severity":1,"message":"692","line":45,"column":37,"nodeType":"691","endLine":45,"endColumn":61},{"ruleId":"689","severity":1,"message":"692","line":47,"column":41,"nodeType":"691","endLine":47,"endColumn":65},{"ruleId":"689","severity":1,"message":"690","line":52,"column":39,"nodeType":"691","endLine":52,"endColumn":60},{"ruleId":"689","severity":1,"message":"690","line":60,"column":51,"nodeType":"691","endLine":60,"endColumn":71},{"ruleId":"689","severity":1,"message":"690","line":64,"column":42,"nodeType":"691","endLine":64,"endColumn":68},{"ruleId":"689","severity":1,"message":"690","line":66,"column":38,"nodeType":"691","endLine":66,"endColumn":59},{"ruleId":"689","severity":1,"message":"692","line":70,"column":16,"nodeType":"691","endLine":70,"endColumn":39},{"ruleId":"689","severity":1,"message":"690","line":74,"column":24,"nodeType":"691","endLine":74,"endColumn":45},{"ruleId":"689","severity":1,"message":"692","line":76,"column":34,"nodeType":"691","endLine":76,"endColumn":58},{"ruleId":"660","severity":1,"message":"661","line":104,"column":25,"nodeType":"662","endLine":106,"endColumn":26},{"ruleId":"689","severity":1,"message":"690","line":110,"column":42,"nodeType":"691","endLine":110,"endColumn":68},{"ruleId":"660","severity":1,"message":"661","line":111,"column":25,"nodeType":"662","endLine":113,"endColumn":26},{"ruleId":"660","severity":1,"message":"661","line":120,"column":25,"nodeType":"662","endLine":122,"endColumn":26},{"ruleId":"689","severity":1,"message":"690","line":126,"column":36,"nodeType":"691","endLine":126,"endColumn":56},{"ruleId":"660","severity":1,"message":"661","line":127,"column":25,"nodeType":"662","endLine":129,"endColumn":26},{"ruleId":"660","severity":1,"message":"661","line":136,"column":21,"nodeType":"662","endLine":136,"endColumn":60},{"ruleId":"693","severity":1,"message":"694","line":11,"column":11,"nodeType":"665","messageId":"695","endLine":11,"endColumn":29},{"ruleId":"685","severity":1,"message":"686","line":23,"column":25,"nodeType":"687","messageId":"688","endLine":23,"endColumn":27},{"ruleId":"663","severity":1,"message":"696","line":26,"column":9,"nodeType":"665","messageId":"666","endLine":26,"endColumn":38},{"ruleId":"663","severity":1,"message":"697","line":27,"column":9,"nodeType":"665","messageId":"666","endLine":27,"endColumn":38},{"ruleId":"685","severity":1,"message":"698","line":28,"column":7,"nodeType":"687","messageId":"688","endLine":28,"endColumn":9},{"ruleId":"660","severity":1,"message":"661","line":33,"column":17,"nodeType":"662","endLine":35,"endColumn":19},{"ruleId":"689","severity":1,"message":"692","line":34,"column":21,"nodeType":"691","endLine":34,"endColumn":39},{"ruleId":"689","severity":1,"message":"692","line":36,"column":25,"nodeType":"691","endLine":36,"endColumn":42},{"ruleId":"660","severity":1,"message":"661","line":48,"column":21,"nodeType":"662","endLine":48,"endColumn":57},{"ruleId":"689","severity":1,"message":"692","line":48,"column":36,"nodeType":"691","endLine":48,"endColumn":54},{"ruleId":"689","severity":1,"message":"692","line":52,"column":36,"nodeType":"691","endLine":52,"endColumn":52},{"ruleId":"689","severity":1,"message":"692","line":53,"column":37,"nodeType":"691","endLine":53,"endColumn":54},{"ruleId":"660","severity":1,"message":"661","line":59,"column":25,"nodeType":"662","endLine":59,"endColumn":61},{"ruleId":"689","severity":1,"message":"692","line":61,"column":26,"nodeType":"691","endLine":61,"endColumn":45},{"ruleId":"663","severity":1,"message":"708","line":6,"column":10,"nodeType":"665","messageId":"666","endLine":6,"endColumn":27},{"ruleId":"663","severity":1,"message":"709","line":6,"column":29,"nodeType":"665","messageId":"666","endLine":6,"endColumn":45},{"ruleId":"663","severity":1,"message":"710","line":6,"column":47,"nodeType":"665","messageId":"666","endLine":6,"endColumn":60},{"ruleId":"689","severity":1,"message":"692","line":28,"column":25,"nodeType":"691","endLine":28,"endColumn":42},{"ruleId":"685","severity":1,"message":"686","line":32,"column":25,"nodeType":"687","messageId":"688","endLine":32,"endColumn":27},{"ruleId":"663","severity":1,"message":"697","line":34,"column":52,"nodeType":"665","messageId":"666","endLine":34,"endColumn":78},{"ruleId":"689","severity":1,"message":"692","line":36,"column":13,"nodeType":"691","endLine":36,"endColumn":30},{"ruleId":"689","severity":1,"message":"692","line":40,"column":37,"nodeType":"691","endLine":40,"endColumn":54},{"ruleId":"689","severity":1,"message":"692","line":42,"column":41,"nodeType":"691","endLine":42,"endColumn":58},{"ruleId":"689","severity":1,"message":"690","line":47,"column":39,"nodeType":"691","endLine":47,"endColumn":60},{"ruleId":"689","severity":1,"message":"690","line":55,"column":30,"nodeType":"691","endLine":55,"endColumn":51},{"ruleId":"689","severity":1,"message":"692","line":57,"column":16,"nodeType":"691","endLine":57,"endColumn":39},{"ruleId":"689","severity":1,"message":"690","line":61,"column":24,"nodeType":"691","endLine":61,"endColumn":45},{"ruleId":"660","severity":1,"message":"661","line":89,"column":21,"nodeType":"662","endLine":91,"endColumn":22},{"ruleId":"660","severity":1,"message":"661","line":96,"column":21,"nodeType":"662","endLine":98,"endColumn":22},{"ruleId":"660","severity":1,"message":"661","line":104,"column":21,"nodeType":"662","endLine":104,"endColumn":60},{"ruleId":"693","severity":1,"message":"694","line":20,"column":11,"nodeType":"665","messageId":"695","endLine":20,"endColumn":33},{"ruleId":"685","severity":1,"message":"686","line":32,"column":25,"nodeType":"687","messageId":"688","endLine":32,"endColumn":27},{"ruleId":"663","severity":1,"message":"696","line":35,"column":9,"nodeType":"665","messageId":"666","endLine":35,"endColumn":42},{"ruleId":"663","severity":1,"message":"697","line":36,"column":9,"nodeType":"665","messageId":"666","endLine":36,"endColumn":42},{"ruleId":"685","severity":1,"message":"698","line":37,"column":7,"nodeType":"687","messageId":"688","endLine":37,"endColumn":9},{"ruleId":"689","severity":1,"message":"692","line":59,"column":51,"nodeType":"691","endLine":59,"endColumn":78},{"ruleId":"689","severity":1,"message":"692","line":60,"column":49,"nodeType":"691","endLine":60,"endColumn":74},{"ruleId":"663","severity":1,"message":"679","line":4,"column":22,"nodeType":"665","messageId":"666","endLine":4,"endColumn":38},{"ruleId":"693","severity":1,"message":"694","line":10,"column":11,"nodeType":"665","messageId":"695","endLine":10,"endColumn":28},{"ruleId":"685","severity":1,"message":"686","line":22,"column":25,"nodeType":"687","messageId":"688","endLine":22,"endColumn":27},{"ruleId":"663","severity":1,"message":"696","line":25,"column":9,"nodeType":"665","messageId":"666","endLine":25,"endColumn":37},{"ruleId":"663","severity":1,"message":"697","line":26,"column":9,"nodeType":"665","messageId":"666","endLine":26,"endColumn":37},{"ruleId":"685","severity":1,"message":"698","line":27,"column":7,"nodeType":"687","messageId":"688","endLine":27,"endColumn":9},{"ruleId":"689","severity":1,"message":"692","line":30,"column":13,"nodeType":"691","endLine":30,"endColumn":28},{"ruleId":"689","severity":1,"message":"692","line":35,"column":13,"nodeType":"691","endLine":35,"endColumn":28},{"ruleId":"660","severity":1,"message":"661","line":53,"column":25,"nodeType":"662","endLine":55,"endColumn":26},{"ruleId":"689","severity":1,"message":"692","line":54,"column":29,"nodeType":"691","endLine":54,"endColumn":50},{"ruleId":"663","severity":1,"message":"711","line":4,"column":5,"nodeType":"665","messageId":"666","endLine":4,"endColumn":19},{"ruleId":"663","severity":1,"message":"712","line":5,"column":5,"nodeType":"665","messageId":"666","endLine":5,"endColumn":24},{"ruleId":"663","severity":1,"message":"675","line":7,"column":10,"nodeType":"665","messageId":"666","endLine":7,"endColumn":20},{"ruleId":"663","severity":1,"message":"705","line":7,"column":22,"nodeType":"665","messageId":"666","endLine":7,"endColumn":38},{"ruleId":"663","severity":1,"message":"677","line":7,"column":40,"nodeType":"665","messageId":"666","endLine":7,"endColumn":46},{"ruleId":"680","severity":1,"message":"681","line":53,"column":43,"nodeType":"682","messageId":"683","endLine":53,"endColumn":46,"suggestions":"713"},{"ruleId":"680","severity":1,"message":"681","line":75,"column":26,"nodeType":"682","messageId":"683","endLine":75,"endColumn":29,"suggestions":"714"},{"ruleId":"680","severity":1,"message":"681","line":110,"column":29,"nodeType":"682","messageId":"683","endLine":110,"endColumn":32,"suggestions":"715"},{"ruleId":"663","severity":1,"message":"675","line":5,"column":10,"nodeType":"665","messageId":"666","endLine":5,"endColumn":20},{"ruleId":"663","severity":1,"message":"705","line":5,"column":22,"nodeType":"665","messageId":"666","endLine":5,"endColumn":38},{"ruleId":"663","severity":1,"message":"706","line":6,"column":10,"nodeType":"665","messageId":"666","endLine":6,"endColumn":19},{"ruleId":"685","severity":1,"message":"686","line":31,"column":25,"nodeType":"687","messageId":"688","endLine":31,"endColumn":27},{"ruleId":"663","severity":1,"message":"697","line":35,"column":9,"nodeType":"665","messageId":"666","endLine":35,"endColumn":47},{"ruleId":"689","severity":1,"message":"692","line":38,"column":13,"nodeType":"691","endLine":38,"endColumn":33},{"ruleId":"689","severity":1,"message":"692","line":43,"column":56,"nodeType":"691","endLine":43,"endColumn":76},{"ruleId":"689","severity":1,"message":"690","line":73,"column":19,"nodeType":"691","endLine":73,"endColumn":43},{"ruleId":"660","severity":1,"message":"661","line":83,"column":21,"nodeType":"662","endLine":85,"endColumn":22},{"ruleId":"660","severity":1,"message":"661","line":92,"column":21,"nodeType":"662","endLine":92,"endColumn":75},{"ruleId":"689","severity":1,"message":"690","line":95,"column":29,"nodeType":"691","endLine":95,"endColumn":53},{"ruleId":"660","severity":1,"message":"661","line":96,"column":21,"nodeType":"662","endLine":96,"endColumn":76},{"ruleId":"660","severity":1,"message":"661","line":97,"column":21,"nodeType":"662","endLine":99,"endColumn":22},{"ruleId":"660","severity":1,"message":"661","line":114,"column":21,"nodeType":"662","endLine":114,"endColumn":63},{"ruleId":"660","severity":1,"message":"661","line":127,"column":29,"nodeType":"662","endLine":127,"endColumn":64},{"ruleId":"660","severity":1,"message":"661","line":137,"column":25,"nodeType":"662","endLine":139,"endColumn":26},{"ruleId":"660","severity":1,"message":"661","line":146,"column":25,"nodeType":"662","endLine":148,"endColumn":26},{"ruleId":"660","severity":1,"message":"661","line":156,"column":25,"nodeType":"662","endLine":158,"endColumn":26},{"ruleId":"660","severity":1,"message":"661","line":165,"column":25,"nodeType":"662","endLine":165,"endColumn":62},{"ruleId":"689","severity":1,"message":"690","line":175,"column":36,"nodeType":"691","endLine":175,"endColumn":60},{"ruleId":"689","severity":1,"message":"692","line":186,"column":39,"nodeType":"691","endLine":186,"endColumn":59},{"ruleId":"689","severity":1,"message":"692","line":194,"column":13,"nodeType":"691","endLine":194,"endColumn":33},{"ruleId":"689","severity":1,"message":"692","line":198,"column":13,"nodeType":"691","endLine":198,"endColumn":33},{"ruleId":"689","severity":1,"message":"692","line":202,"column":9,"nodeType":"691","endLine":202,"endColumn":36},{"ruleId":"689","severity":1,"message":"690","line":202,"column":37,"nodeType":"691","endLine":202,"endColumn":61},{"ruleId":"689","severity":1,"message":"692","line":28,"column":29,"nodeType":"691","endLine":28,"endColumn":49},{"ruleId":"685","severity":1,"message":"686","line":33,"column":25,"nodeType":"687","messageId":"688","endLine":33,"endColumn":27},{"ruleId":"663","severity":1,"message":"696","line":36,"column":9,"nodeType":"665","messageId":"666","endLine":36,"endColumn":40},{"ruleId":"663","severity":1,"message":"697","line":37,"column":9,"nodeType":"665","messageId":"666","endLine":37,"endColumn":40},{"ruleId":"685","severity":1,"message":"698","line":38,"column":7,"nodeType":"687","messageId":"688","endLine":38,"endColumn":9},{"ruleId":"689","severity":1,"message":"692","line":46,"column":13,"nodeType":"691","endLine":46,"endColumn":34},{"ruleId":"689","severity":1,"message":"692","line":47,"column":13,"nodeType":"691","endLine":47,"endColumn":37},{"ruleId":"689","severity":1,"message":"692","line":51,"column":38,"nodeType":"691","endLine":51,"endColumn":59},{"ruleId":"689","severity":1,"message":"692","line":56,"column":9,"nodeType":"691","endLine":56,"endColumn":33},{"ruleId":"689","severity":1,"message":"692","line":60,"column":16,"nodeType":"691","endLine":60,"endColumn":36},{"ruleId":"689","severity":1,"message":"692","line":67,"column":15,"nodeType":"691","endLine":67,"endColumn":35},{"ruleId":"689","severity":1,"message":"690","line":68,"column":15,"nodeType":"691","endLine":68,"endColumn":36},{"ruleId":"689","severity":1,"message":"692","line":70,"column":28,"nodeType":"691","endLine":70,"endColumn":49},{"ruleId":"689","severity":1,"message":"690","line":79,"column":45,"nodeType":"691","endLine":79,"endColumn":68},{"ruleId":"660","severity":1,"message":"661","line":81,"column":37,"nodeType":"662","endLine":81,"endColumn":76},{"ruleId":"689","severity":1,"message":"690","line":90,"column":18,"nodeType":"691","endLine":90,"endColumn":41},{"ruleId":"660","severity":1,"message":"661","line":104,"column":33,"nodeType":"662","endLine":104,"endColumn":74},{"ruleId":"689","severity":1,"message":"690","line":110,"column":19,"nodeType":"691","endLine":110,"endColumn":42},{"ruleId":"660","severity":1,"message":"661","line":115,"column":37,"nodeType":"662","endLine":121,"endColumn":38},{"ruleId":"660","severity":1,"message":"661","line":128,"column":33,"nodeType":"662","endLine":134,"endColumn":34},{"ruleId":"689","severity":1,"message":"692","line":143,"column":17,"nodeType":"691","endLine":143,"endColumn":40},{"ruleId":"689","severity":1,"message":"692","line":144,"column":17,"nodeType":"691","endLine":144,"endColumn":40},{"ruleId":"689","severity":1,"message":"692","line":154,"column":13,"nodeType":"691","endLine":154,"endColumn":37},{"ruleId":"689","severity":1,"message":"690","line":158,"column":27,"nodeType":"691","endLine":158,"endColumn":48},{"ruleId":"689","severity":1,"message":"692","line":162,"column":9,"nodeType":"691","endLine":162,"endColumn":33},{"ruleId":"689","severity":1,"message":"692","line":166,"column":28,"nodeType":"691","endLine":166,"endColumn":49},{"ruleId":"663","severity":1,"message":"675","line":6,"column":20,"nodeType":"665","messageId":"666","endLine":6,"endColumn":30},{"ruleId":"685","severity":1,"message":"686","line":36,"column":25,"nodeType":"687","messageId":"688","endLine":36,"endColumn":27},{"ruleId":"663","severity":1,"message":"696","line":39,"column":9,"nodeType":"665","messageId":"666","endLine":39,"endColumn":46},{"ruleId":"663","severity":1,"message":"697","line":40,"column":9,"nodeType":"665","messageId":"666","endLine":40,"endColumn":46},{"ruleId":"685","severity":1,"message":"698","line":41,"column":7,"nodeType":"687","messageId":"688","endLine":41,"endColumn":9},{"ruleId":"689","severity":1,"message":"692","line":49,"column":13,"nodeType":"691","endLine":49,"endColumn":40},{"ruleId":"689","severity":1,"message":"692","line":50,"column":13,"nodeType":"691","endLine":50,"endColumn":37},{"ruleId":"689","severity":1,"message":"692","line":55,"column":38,"nodeType":"691","endLine":55,"endColumn":65},{"ruleId":"689","severity":1,"message":"692","line":60,"column":9,"nodeType":"691","endLine":60,"endColumn":33},{"ruleId":"689","severity":1,"message":"692","line":65,"column":13,"nodeType":"691","endLine":65,"endColumn":37},{"ruleId":"689","severity":1,"message":"690","line":69,"column":27,"nodeType":"691","endLine":69,"endColumn":48},{"ruleId":"689","severity":1,"message":"692","line":75,"column":9,"nodeType":"691","endLine":75,"endColumn":33},{"ruleId":"689","severity":1,"message":"692","line":81,"column":28,"nodeType":"691","endLine":81,"endColumn":54},{"ruleId":"689","severity":1,"message":"690","line":81,"column":58,"nodeType":"691","endLine":81,"endColumn":79},{"ruleId":"689","severity":1,"message":"692","line":83,"column":30,"nodeType":"691","endLine":83,"endColumn":56},{"ruleId":"689","severity":1,"message":"692","line":85,"column":34,"nodeType":"691","endLine":85,"endColumn":61},{"ruleId":"689","severity":1,"message":"690","line":94,"column":41,"nodeType":"691","endLine":94,"endColumn":64},{"ruleId":"660","severity":1,"message":"661","line":95,"column":33,"nodeType":"662","endLine":95,"endColumn":72},{"ruleId":"689","severity":1,"message":"690","line":103,"column":18,"nodeType":"691","endLine":103,"endColumn":41},{"ruleId":"660","severity":1,"message":"661","line":117,"column":33,"nodeType":"662","endLine":117,"endColumn":74},{"ruleId":"689","severity":1,"message":"690","line":123,"column":19,"nodeType":"691","endLine":123,"endColumn":42},{"ruleId":"660","severity":1,"message":"661","line":128,"column":37,"nodeType":"662","endLine":134,"endColumn":38},{"ruleId":"660","severity":1,"message":"661","line":142,"column":33,"nodeType":"662","endLine":148,"endColumn":34},{"ruleId":"689","severity":1,"message":"692","line":161,"column":17,"nodeType":"691","endLine":161,"endColumn":44},{"ruleId":"689","severity":1,"message":"692","line":169,"column":13,"nodeType":"691","endLine":169,"endColumn":36},{"ruleId":"689","severity":1,"message":"692","line":170,"column":13,"nodeType":"691","endLine":170,"endColumn":36},{"ruleId":"663","severity":1,"message":"716","line":6,"column":5,"nodeType":"665","messageId":"666","endLine":6,"endColumn":22},{"ruleId":"663","severity":1,"message":"717","line":7,"column":5,"nodeType":"665","messageId":"666","endLine":7,"endColumn":30},{"ruleId":"663","severity":1,"message":"710","line":8,"column":5,"nodeType":"665","messageId":"666","endLine":8,"endColumn":18},{"ruleId":"685","severity":1,"message":"686","line":36,"column":25,"nodeType":"687","messageId":"688","endLine":36,"endColumn":27},{"ruleId":"663","severity":1,"message":"696","line":39,"column":9,"nodeType":"665","messageId":"666","endLine":39,"endColumn":42},{"ruleId":"663","severity":1,"message":"697","line":40,"column":9,"nodeType":"665","messageId":"666","endLine":40,"endColumn":42},{"ruleId":"685","severity":1,"message":"698","line":41,"column":7,"nodeType":"687","messageId":"688","endLine":41,"endColumn":9},{"ruleId":"689","severity":1,"message":"690","line":44,"column":13,"nodeType":"691","endLine":44,"endColumn":36},{"ruleId":"689","severity":1,"message":"690","line":52,"column":33,"nodeType":"691","endLine":52,"endColumn":57},{"ruleId":"689","severity":1,"message":"692","line":70,"column":22,"nodeType":"691","endLine":70,"endColumn":40},{"ruleId":"689","severity":1,"message":"690","line":81,"column":36,"nodeType":"691","endLine":81,"endColumn":60},{"ruleId":"660","severity":1,"message":"661","line":82,"column":29,"nodeType":"662","endLine":84,"endColumn":30},{"ruleId":"689","severity":1,"message":"690","line":89,"column":33,"nodeType":"691","endLine":89,"endColumn":56},{"ruleId":"689","severity":1,"message":"690","line":91,"column":39,"nodeType":"691","endLine":91,"endColumn":62},{"ruleId":"660","severity":1,"message":"661","line":96,"column":29,"nodeType":"662","endLine":96,"endColumn":75},{"ruleId":"689","severity":1,"message":"690","line":98,"column":33,"nodeType":"691","endLine":98,"endColumn":56},{"ruleId":"693","severity":1,"message":"694","line":12,"column":11,"nodeType":"665","messageId":"695","endLine":12,"endColumn":40},{"ruleId":"685","severity":1,"message":"686","line":24,"column":25,"nodeType":"687","messageId":"688","endLine":24,"endColumn":27},{"ruleId":"663","severity":1,"message":"696","line":27,"column":9,"nodeType":"665","messageId":"666","endLine":27,"endColumn":49},{"ruleId":"663","severity":1,"message":"697","line":28,"column":9,"nodeType":"665","messageId":"666","endLine":28,"endColumn":49},{"ruleId":"685","severity":1,"message":"698","line":29,"column":7,"nodeType":"687","messageId":"688","endLine":29,"endColumn":9},{"ruleId":"689","severity":1,"message":"692","line":32,"column":14,"nodeType":"691","endLine":32,"endColumn":31},{"ruleId":"689","severity":1,"message":"692","line":38,"column":25,"nodeType":"691","endLine":38,"endColumn":42},{"ruleId":"660","severity":1,"message":"661","line":39,"column":17,"nodeType":"662","endLine":39,"endColumn":53},{"ruleId":"689","severity":1,"message":"692","line":39,"column":32,"nodeType":"691","endLine":39,"endColumn":50},{"ruleId":"660","severity":1,"message":"661","line":43,"column":21,"nodeType":"662","endLine":43,"endColumn":57},{"ruleId":"689","severity":1,"message":"692","line":43,"column":36,"nodeType":"691","endLine":43,"endColumn":54},{"ruleId":"660","severity":1,"message":"661","line":47,"column":25,"nodeType":"662","endLine":47,"endColumn":61},{"ruleId":"660","severity":1,"message":"661","line":51,"column":29,"nodeType":"662","endLine":53,"endColumn":30},{"ruleId":"689","severity":1,"message":"692","line":52,"column":33,"nodeType":"691","endLine":52,"endColumn":56},{"ruleId":"693","severity":1,"message":"694","line":12,"column":11,"nodeType":"665","messageId":"695","endLine":12,"endColumn":27},{"ruleId":"685","severity":1,"message":"686","line":24,"column":25,"nodeType":"687","messageId":"688","endLine":24,"endColumn":27},{"ruleId":"663","severity":1,"message":"696","line":27,"column":9,"nodeType":"665","messageId":"666","endLine":27,"endColumn":36},{"ruleId":"663","severity":1,"message":"697","line":28,"column":9,"nodeType":"665","messageId":"666","endLine":28,"endColumn":36},{"ruleId":"685","severity":1,"message":"698","line":29,"column":7,"nodeType":"687","messageId":"688","endLine":29,"endColumn":9},{"ruleId":"689","severity":1,"message":"692","line":36,"column":38,"nodeType":"691","endLine":36,"endColumn":54},{"ruleId":"689","severity":1,"message":"692","line":41,"column":9,"nodeType":"691","endLine":41,"endColumn":33},{"ruleId":"689","severity":1,"message":"692","line":57,"column":26,"nodeType":"691","endLine":57,"endColumn":42},{"ruleId":"660","severity":1,"message":"661","line":94,"column":41,"nodeType":"662","endLine":94,"endColumn":79},{"ruleId":"660","severity":1,"message":"661","line":107,"column":37,"nodeType":"662","endLine":107,"endColumn":72},{"ruleId":"689","severity":1,"message":"692","line":117,"column":38,"nodeType":"691","endLine":117,"endColumn":54},{"ruleId":"689","severity":1,"message":"692","line":124,"column":9,"nodeType":"691","endLine":124,"endColumn":33},{"ruleId":"689","severity":1,"message":"692","line":127,"column":38,"nodeType":"691","endLine":127,"endColumn":54},{"ruleId":"689","severity":1,"message":"692","line":131,"column":9,"nodeType":"691","endLine":131,"endColumn":33},{"ruleId":"685","severity":1,"message":"686","line":34,"column":25,"nodeType":"687","messageId":"688","endLine":34,"endColumn":27},{"ruleId":"663","severity":1,"message":"696","line":37,"column":9,"nodeType":"665","messageId":"666","endLine":37,"endColumn":42},{"ruleId":"663","severity":1,"message":"697","line":38,"column":9,"nodeType":"665","messageId":"666","endLine":38,"endColumn":42},{"ruleId":"685","severity":1,"message":"698","line":39,"column":7,"nodeType":"687","messageId":"688","endLine":39,"endColumn":9},{"ruleId":"689","severity":1,"message":"692","line":46,"column":38,"nodeType":"691","endLine":46,"endColumn":64},{"ruleId":"689","severity":1,"message":"692","line":51,"column":9,"nodeType":"691","endLine":51,"endColumn":39},{"ruleId":"689","severity":1,"message":"690","line":58,"column":37,"nodeType":"691","endLine":58,"endColumn":61},{"ruleId":"689","severity":1,"message":"692","line":79,"column":26,"nodeType":"691","endLine":79,"endColumn":52},{"ruleId":"660","severity":1,"message":"661","line":84,"column":41,"nodeType":"662","endLine":90,"endColumn":42},{"ruleId":"660","severity":1,"message":"661","line":110,"column":41,"nodeType":"662","endLine":119,"endColumn":43},{"ruleId":"660","severity":1,"message":"661","line":143,"column":41,"nodeType":"662","endLine":145,"endColumn":42},{"ruleId":"660","severity":1,"message":"661","line":161,"column":37,"nodeType":"662","endLine":161,"endColumn":74},{"ruleId":"689","severity":1,"message":"692","line":172,"column":38,"nodeType":"691","endLine":172,"endColumn":64},{"ruleId":"689","severity":1,"message":"692","line":176,"column":9,"nodeType":"691","endLine":176,"endColumn":39},{"ruleId":"689","severity":1,"message":"692","line":180,"column":38,"nodeType":"691","endLine":180,"endColumn":64},{"ruleId":"689","severity":1,"message":"690","line":182,"column":23,"nodeType":"691","endLine":182,"endColumn":47},{"ruleId":"689","severity":1,"message":"692","line":184,"column":9,"nodeType":"691","endLine":184,"endColumn":39},{"ruleId":"663","severity":1,"message":"718","line":2,"column":10,"nodeType":"665","messageId":"666","endLine":2,"endColumn":23},{"ruleId":"663","severity":1,"message":"719","line":2,"column":25,"nodeType":"665","messageId":"666","endLine":2,"endColumn":37},{"ruleId":"693","severity":1,"message":"694","line":13,"column":11,"nodeType":"665","messageId":"695","endLine":13,"endColumn":33},{"ruleId":"685","severity":1,"message":"686","line":27,"column":25,"nodeType":"687","messageId":"688","endLine":27,"endColumn":27},{"ruleId":"663","severity":1,"message":"696","line":30,"column":9,"nodeType":"665","messageId":"666","endLine":30,"endColumn":42},{"ruleId":"663","severity":1,"message":"697","line":31,"column":9,"nodeType":"665","messageId":"666","endLine":31,"endColumn":42},{"ruleId":"685","severity":1,"message":"698","line":32,"column":7,"nodeType":"687","messageId":"688","endLine":32,"endColumn":9},{"ruleId":"660","severity":1,"message":"661","line":40,"column":29,"nodeType":"662","endLine":40,"endColumn":69},{"ruleId":"660","severity":1,"message":"661","line":44,"column":29,"nodeType":"662","endLine":46,"endColumn":30},{"ruleId":"689","severity":1,"message":"692","line":45,"column":33,"nodeType":"691","endLine":45,"endColumn":56},{"ruleId":"689","severity":1,"message":"692","line":51,"column":43,"nodeType":"691","endLine":51,"endColumn":64},{"ruleId":"720","severity":1,"message":"721","line":143,"column":12,"nodeType":"722","messageId":"688","endLine":143,"endColumn":16},{"ruleId":"685","severity":1,"message":"686","line":37,"column":25,"nodeType":"687","messageId":"688","endLine":37,"endColumn":27},{"ruleId":"663","severity":1,"message":"696","line":40,"column":9,"nodeType":"665","messageId":"666","endLine":40,"endColumn":46},{"ruleId":"663","severity":1,"message":"697","line":41,"column":9,"nodeType":"665","messageId":"666","endLine":41,"endColumn":46},{"ruleId":"685","severity":1,"message":"698","line":42,"column":7,"nodeType":"687","messageId":"688","endLine":42,"endColumn":9},{"ruleId":"689","severity":1,"message":"692","line":45,"column":23,"nodeType":"691","endLine":45,"endColumn":39},{"ruleId":"689","severity":1,"message":"692","line":46,"column":22,"nodeType":"691","endLine":46,"endColumn":38},{"ruleId":"689","severity":1,"message":"692","line":56,"column":29,"nodeType":"691","endLine":56,"endColumn":56},{"ruleId":"660","severity":1,"message":"661","line":111,"column":33,"nodeType":"662","endLine":111,"endColumn":80},{"ruleId":"689","severity":1,"message":"692","line":111,"column":48,"nodeType":"691","endLine":111,"endColumn":73},{"ruleId":"660","severity":1,"message":"661","line":117,"column":33,"nodeType":"662","endLine":123,"endColumn":34},{"ruleId":"689","severity":1,"message":"690","line":125,"column":41,"nodeType":"691","endLine":125,"endColumn":71},{"ruleId":"689","severity":1,"message":"690","line":134,"column":22,"nodeType":"691","endLine":134,"endColumn":52},{"ruleId":"660","severity":1,"message":"661","line":137,"column":29,"nodeType":"662","endLine":137,"endColumn":77},{"ruleId":"689","severity":1,"message":"692","line":145,"column":29,"nodeType":"691","endLine":145,"endColumn":45},{"ruleId":"693","severity":1,"message":"694","line":4,"column":11,"nodeType":"665","messageId":"695","endLine":4,"endColumn":27},{"ruleId":"693","severity":1,"message":"694","line":5,"column":11,"nodeType":"665","messageId":"695","endLine":5,"endColumn":27},{"ruleId":"685","severity":1,"message":"686","line":17,"column":25,"nodeType":"687","messageId":"688","endLine":17,"endColumn":27},{"ruleId":"663","severity":1,"message":"696","line":20,"column":9,"nodeType":"665","messageId":"666","endLine":20,"endColumn":36},{"ruleId":"663","severity":1,"message":"697","line":21,"column":9,"nodeType":"665","messageId":"666","endLine":21,"endColumn":36},{"ruleId":"685","severity":1,"message":"698","line":22,"column":7,"nodeType":"687","messageId":"688","endLine":22,"endColumn":9},{"ruleId":"689","severity":1,"message":"692","line":28,"column":50,"nodeType":"691","endLine":28,"endColumn":69},{"ruleId":"663","severity":1,"message":"723","line":17,"column":10,"nodeType":"665","messageId":"666","endLine":17,"endColumn":26},{"ruleId":"663","severity":1,"message":"724","line":17,"column":28,"nodeType":"665","messageId":"666","endLine":17,"endColumn":46},{"ruleId":"693","severity":1,"message":"694","line":22,"column":11,"nodeType":"665","messageId":"695","endLine":22,"endColumn":29},{"ruleId":"685","severity":1,"message":"686","line":46,"column":25,"nodeType":"687","messageId":"688","endLine":46,"endColumn":27},{"ruleId":"663","severity":1,"message":"696","line":49,"column":9,"nodeType":"665","messageId":"666","endLine":49,"endColumn":38},{"ruleId":"663","severity":1,"message":"697","line":50,"column":9,"nodeType":"665","messageId":"666","endLine":50,"endColumn":38},{"ruleId":"685","severity":1,"message":"698","line":51,"column":7,"nodeType":"687","messageId":"688","endLine":51,"endColumn":9},{"ruleId":"689","severity":1,"message":"690","line":64,"column":36,"nodeType":"691","endLine":64,"endColumn":57},{"ruleId":"660","severity":1,"message":"661","line":70,"column":43,"nodeType":"662","endLine":70,"endColumn":78},{"ruleId":"660","severity":1,"message":"661","line":74,"column":25,"nodeType":"662","endLine":74,"endColumn":66},{"ruleId":"689","severity":1,"message":"690","line":78,"column":18,"nodeType":"691","endLine":78,"endColumn":40},{"ruleId":"689","severity":1,"message":"690","line":81,"column":22,"nodeType":"691","endLine":81,"endColumn":43},{"ruleId":"660","severity":1,"message":"661","line":85,"column":33,"nodeType":"662","endLine":85,"endColumn":76},{"ruleId":"689","severity":1,"message":"690","line":113,"column":29,"nodeType":"691","endLine":113,"endColumn":50},{"ruleId":"660","severity":1,"message":"661","line":114,"column":21,"nodeType":"662","endLine":114,"endColumn":77},{"ruleId":"689","severity":1,"message":"690","line":116,"column":53,"nodeType":"691","endLine":116,"endColumn":74},{"ruleId":"689","severity":1,"message":"690","line":137,"column":20,"nodeType":"691","endLine":137,"endColumn":41},{"ruleId":"663","severity":1,"message":"725","line":8,"column":5,"nodeType":"665","messageId":"666","endLine":8,"endColumn":21},{"ruleId":"663","severity":1,"message":"726","line":9,"column":5,"nodeType":"665","messageId":"666","endLine":9,"endColumn":21},{"ruleId":"663","severity":1,"message":"723","line":10,"column":5,"nodeType":"665","messageId":"666","endLine":10,"endColumn":21},{"ruleId":"689","severity":1,"message":"692","line":41,"column":13,"nodeType":"691","endLine":41,"endColumn":34},{"ruleId":"689","severity":1,"message":"692","line":46,"column":18,"nodeType":"691","endLine":46,"endColumn":39},{"ruleId":"663","severity":1,"message":"696","line":57,"column":9,"nodeType":"665","messageId":"666","endLine":57,"endColumn":43},{"ruleId":"663","severity":1,"message":"697","line":58,"column":9,"nodeType":"665","messageId":"666","endLine":58,"endColumn":43},{"ruleId":"685","severity":1,"message":"698","line":59,"column":7,"nodeType":"687","messageId":"688","endLine":59,"endColumn":9},{"ruleId":"689","severity":1,"message":"692","line":62,"column":13,"nodeType":"691","endLine":62,"endColumn":34},{"ruleId":"660","severity":1,"message":"661","line":74,"column":25,"nodeType":"662","endLine":74,"endColumn":64},{"ruleId":"689","severity":1,"message":"690","line":75,"column":36,"nodeType":"691","endLine":75,"endColumn":65},{"ruleId":"689","severity":1,"message":"692","line":79,"column":31,"nodeType":"691","endLine":79,"endColumn":52},{"ruleId":"689","severity":1,"message":"692","line":88,"column":26,"nodeType":"691","endLine":88,"endColumn":47},{"ruleId":"689","severity":1,"message":"692","line":90,"column":27,"nodeType":"691","endLine":90,"endColumn":48},{"ruleId":"689","severity":1,"message":"690","line":92,"column":18,"nodeType":"691","endLine":92,"endColumn":39},{"ruleId":"689","severity":1,"message":"690","line":94,"column":18,"nodeType":"691","endLine":94,"endColumn":39},{"ruleId":"689","severity":1,"message":"690","line":97,"column":42,"nodeType":"691","endLine":97,"endColumn":63},{"ruleId":"689","severity":1,"message":"690","line":98,"column":42,"nodeType":"691","endLine":98,"endColumn":63},{"ruleId":"689","severity":1,"message":"690","line":99,"column":43,"nodeType":"691","endLine":99,"endColumn":64},{"ruleId":"689","severity":1,"message":"690","line":100,"column":41,"nodeType":"691","endLine":100,"endColumn":62},{"ruleId":"689","severity":1,"message":"690","line":104,"column":26,"nodeType":"691","endLine":104,"endColumn":47},{"ruleId":"689","severity":1,"message":"690","line":110,"column":26,"nodeType":"691","endLine":110,"endColumn":47},{"ruleId":"689","severity":1,"message":"690","line":120,"column":13,"nodeType":"691","endLine":120,"endColumn":34},{"ruleId":"689","severity":1,"message":"692","line":121,"column":13,"nodeType":"691","endLine":121,"endColumn":34},{"ruleId":"689","severity":1,"message":"690","line":129,"column":13,"nodeType":"691","endLine":129,"endColumn":34},{"ruleId":"689","severity":1,"message":"690","line":136,"column":13,"nodeType":"691","endLine":136,"endColumn":34},{"ruleId":"689","severity":1,"message":"692","line":140,"column":29,"nodeType":"691","endLine":140,"endColumn":50},{"ruleId":"689","severity":1,"message":"692","line":141,"column":36,"nodeType":"691","endLine":141,"endColumn":57},"react/jsx-no-bind","JSX props should not use arrow functions","JSXAttribute","@typescript-eslint/no-unused-vars","'AxiosResponse' is defined but never used.","Identifier","unusedVar","'API_IngredParam' is defined but never used.","'API_MealPlanUpdate' is defined but never used.","'API_RecipeIngredParam' is defined but never used.","'API_RecipeParam' is defined but never used.","'API_ShoppingAdd' is defined but never used.","'API_ShoppingDelete' is defined but never used.","'API_ShoppingRemoveRecipe' is defined but never used.","'API_ShoppingUpdate' is defined but never used.","'Ingredient' is defined but never used.","'PlannedMeal' is defined but never used.","'Recipe' is defined but never used.","'SavedDb' is defined but never used.","'ShoppingListItem' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["727","728"],"@typescript-eslint/no-empty-function","Unexpected empty method 'componentDidMount'.","FunctionExpression","unexpected","react/destructuring-assignment","Must use destructuring state assignment","MemberExpression","Must use destructuring props assignment","@typescript-eslint/no-empty-interface","An empty interface is equivalent to `{}`.","noEmpty","'prevProps' is defined but never used.","'prevState' is defined but never used.","Unexpected empty method 'componentDidUpdate'.","'startOfView' is assigned a value but never used.","'endOfView' is assigned a value but never used.","'today' is assigned a value but never used.","react/no-unused-state","Unused state field: 'oldRecipeText'","Property","'IngredientAmount' is defined but never used.","'NewIngAmt' is defined but never used.","Unused state field: 'ingredientHash'","'API_KrogerProdRes' is defined but never used.","'API_KrogerSearch' is defined but never used.","'KrogerProduct' is defined but never used.","'IngredientHash' is defined but never used.","'SuggestedIngredient' is defined but never used.",["729","730"],["731","732"],["733","734"],"'API_KrogerAddCart' is defined but never used.","'API_KrogerAddCartResponse' is defined but never used.","'ItemPredicate' is defined but never used.","'ItemRenderer' is defined but never used.","no-constant-condition","Unexpected constant condition.","Literal","'RecipeSearchData' is defined but never used.","'RecipeSearchParams' is defined but never used.","'ParsedRecipeData' is defined but never used.","'RecipeDataParams' is defined but never used.",{"messageId":"735","fix":"736","desc":"737"},{"messageId":"738","fix":"739","desc":"740"},{"messageId":"735","fix":"741","desc":"737"},{"messageId":"738","fix":"742","desc":"740"},{"messageId":"735","fix":"743","desc":"737"},{"messageId":"738","fix":"744","desc":"740"},{"messageId":"735","fix":"745","desc":"737"},{"messageId":"738","fix":"746","desc":"740"},"suggestUnknown",{"range":"747","text":"748"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"747","text":"749"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"750","text":"748"},{"range":"750","text":"749"},{"range":"751","text":"748"},{"range":"751","text":"749"},{"range":"752","text":"748"},{"range":"752","text":"749"},[3180,3183],"unknown","never",[1443,1446],[1983,1986],[3068,3071]]